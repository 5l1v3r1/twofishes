/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.foursquare.twofish;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class GeocodeServingFeature implements TBase<GeocodeServingFeature, GeocodeServingFeature._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("GeocodeServingFeature");

  private static final TField ID_FIELD_DESC = new TField("id", TType.STRING, (short)1);
  private static final TField SCORING_FEATURES_FIELD_DESC = new TField("scoringFeatures", TType.STRUCT, (short)2);
  private static final TField FEATURE_FIELD_DESC = new TField("feature", TType.STRUCT, (short)3);

  public String id;
  public ScoringFeatures scoringFeatures;
  public GeocodeFeature feature;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    ID((short)1, "id"),
    SCORING_FEATURES((short)2, "scoringFeatures"),
    FEATURE((short)3, "feature");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // SCORING_FEATURES
          return SCORING_FEATURES;
        case 3: // FEATURE
          return FEATURE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new FieldMetaData("id", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.SCORING_FEATURES, new FieldMetaData("scoringFeatures", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, ScoringFeatures.class)));
    tmpMap.put(_Fields.FEATURE, new FieldMetaData("feature", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, GeocodeFeature.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(GeocodeServingFeature.class, metaDataMap);
  }

  public GeocodeServingFeature() {
  }

  public GeocodeServingFeature(
    String id,
    ScoringFeatures scoringFeatures,
    GeocodeFeature feature)
  {
    this();
    this.id = id;
    this.scoringFeatures = scoringFeatures;
    this.feature = feature;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GeocodeServingFeature(GeocodeServingFeature other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetScoringFeatures()) {
      this.scoringFeatures = new ScoringFeatures(other.scoringFeatures);
    }
    if (other.isSetFeature()) {
      this.feature = new GeocodeFeature(other.feature);
    }
  }

  public GeocodeServingFeature deepCopy() {
    return new GeocodeServingFeature(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.scoringFeatures = null;
    this.feature = null;
  }

  public String getId() {
    return this.id;
  }

  public GeocodeServingFeature setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been asigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public ScoringFeatures getScoringFeatures() {
    return this.scoringFeatures;
  }

  public GeocodeServingFeature setScoringFeatures(ScoringFeatures scoringFeatures) {
    this.scoringFeatures = scoringFeatures;
    return this;
  }

  public void unsetScoringFeatures() {
    this.scoringFeatures = null;
  }

  /** Returns true if field scoringFeatures is set (has been asigned a value) and false otherwise */
  public boolean isSetScoringFeatures() {
    return this.scoringFeatures != null;
  }

  public void setScoringFeaturesIsSet(boolean value) {
    if (!value) {
      this.scoringFeatures = null;
    }
  }

  public GeocodeFeature getFeature() {
    return this.feature;
  }

  public GeocodeServingFeature setFeature(GeocodeFeature feature) {
    this.feature = feature;
    return this;
  }

  public void unsetFeature() {
    this.feature = null;
  }

  /** Returns true if field feature is set (has been asigned a value) and false otherwise */
  public boolean isSetFeature() {
    return this.feature != null;
  }

  public void setFeatureIsSet(boolean value) {
    if (!value) {
      this.feature = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case SCORING_FEATURES:
      if (value == null) {
        unsetScoringFeatures();
      } else {
        setScoringFeatures((ScoringFeatures)value);
      }
      break;

    case FEATURE:
      if (value == null) {
        unsetFeature();
      } else {
        setFeature((GeocodeFeature)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case SCORING_FEATURES:
      return getScoringFeatures();

    case FEATURE:
      return getFeature();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case SCORING_FEATURES:
      return isSetScoringFeatures();
    case FEATURE:
      return isSetFeature();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GeocodeServingFeature)
      return this.equals((GeocodeServingFeature)that);
    return false;
  }

  public boolean equals(GeocodeServingFeature that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_scoringFeatures = true && this.isSetScoringFeatures();
    boolean that_present_scoringFeatures = true && that.isSetScoringFeatures();
    if (this_present_scoringFeatures || that_present_scoringFeatures) {
      if (!(this_present_scoringFeatures && that_present_scoringFeatures))
        return false;
      if (!this.scoringFeatures.equals(that.scoringFeatures))
        return false;
    }

    boolean this_present_feature = true && this.isSetFeature();
    boolean that_present_feature = true && that.isSetFeature();
    if (this_present_feature || that_present_feature) {
      if (!(this_present_feature && that_present_feature))
        return false;
      if (!this.feature.equals(that.feature))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(GeocodeServingFeature other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    GeocodeServingFeature typedOther = (GeocodeServingFeature)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScoringFeatures()).compareTo(typedOther.isSetScoringFeatures());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScoringFeatures()) {
      lastComparison = TBaseHelper.compareTo(this.scoringFeatures, typedOther.scoringFeatures);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeature()).compareTo(typedOther.isSetFeature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeature()) {
      lastComparison = TBaseHelper.compareTo(this.feature, typedOther.feature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ID
          if (field.type == TType.STRING) {
            this.id = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SCORING_FEATURES
          if (field.type == TType.STRUCT) {
            this.scoringFeatures = new ScoringFeatures();
            this.scoringFeatures.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // FEATURE
          if (field.type == TType.STRUCT) {
            this.feature = new GeocodeFeature();
            this.feature.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.id != null) {
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeString(this.id);
      oprot.writeFieldEnd();
    }
    if (this.scoringFeatures != null) {
      oprot.writeFieldBegin(SCORING_FEATURES_FIELD_DESC);
      this.scoringFeatures.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.feature != null) {
      oprot.writeFieldBegin(FEATURE_FIELD_DESC);
      this.feature.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GeocodeServingFeature(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("scoringFeatures:");
    if (this.scoringFeatures == null) {
      sb.append("null");
    } else {
      sb.append(this.scoringFeatures);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("feature:");
    if (this.feature == null) {
      sb.append("null");
    } else {
      sb.append(this.feature);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

