/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.foursquare.twofishes;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FeatureName implements org.apache.thrift.TBase<FeatureName, FeatureName._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FeatureName");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LANG_FIELD_DESC = new org.apache.thrift.protocol.TField("lang", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("flags", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField HIGHLIGHTED_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("highlightedName", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FeatureNameStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FeatureNameTupleSchemeFactory());
  }

  public String name; // required
  public String lang; // required
  public List<FeatureNameFlags> flags; // optional
  public String highlightedName; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    LANG((short)2, "lang"),
    FLAGS((short)3, "flags"),
    HIGHLIGHTED_NAME((short)4, "highlightedName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // LANG
          return LANG;
        case 3: // FLAGS
          return FLAGS;
        case 4: // HIGHLIGHTED_NAME
          return HIGHLIGHTED_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.FLAGS,_Fields.HIGHLIGHTED_NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LANG, new org.apache.thrift.meta_data.FieldMetaData("lang", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLAGS, new org.apache.thrift.meta_data.FieldMetaData("flags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, FeatureNameFlags.class))));
    tmpMap.put(_Fields.HIGHLIGHTED_NAME, new org.apache.thrift.meta_data.FieldMetaData("highlightedName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FeatureName.class, metaDataMap);
  }

  public FeatureName() {
    this.flags = new ArrayList<FeatureNameFlags>();

  }

  public FeatureName(
    String name,
    String lang)
  {
    this();
    this.name = name;
    this.lang = lang;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FeatureName(FeatureName other) {
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetLang()) {
      this.lang = other.lang;
    }
    if (other.isSetFlags()) {
      List<FeatureNameFlags> __this__flags = new ArrayList<FeatureNameFlags>();
      for (FeatureNameFlags other_element : other.flags) {
        __this__flags.add(other_element);
      }
      this.flags = __this__flags;
    }
    if (other.isSetHighlightedName()) {
      this.highlightedName = other.highlightedName;
    }
  }

  public FeatureName deepCopy() {
    return new FeatureName(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.lang = null;
    this.flags = new ArrayList<FeatureNameFlags>();

    this.highlightedName = null;
  }

  public String getName() {
    return this.name;
  }

  public FeatureName setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getLang() {
    return this.lang;
  }

  public FeatureName setLang(String lang) {
    this.lang = lang;
    return this;
  }

  public void unsetLang() {
    this.lang = null;
  }

  /** Returns true if field lang is set (has been assigned a value) and false otherwise */
  public boolean isSetLang() {
    return this.lang != null;
  }

  public void setLangIsSet(boolean value) {
    if (!value) {
      this.lang = null;
    }
  }

  public int getFlagsSize() {
    return (this.flags == null) ? 0 : this.flags.size();
  }

  public java.util.Iterator<FeatureNameFlags> getFlagsIterator() {
    return (this.flags == null) ? null : this.flags.iterator();
  }

  public void addToFlags(FeatureNameFlags elem) {
    if (this.flags == null) {
      this.flags = new ArrayList<FeatureNameFlags>();
    }
    this.flags.add(elem);
  }

  public List<FeatureNameFlags> getFlags() {
    return this.flags;
  }

  public FeatureName setFlags(List<FeatureNameFlags> flags) {
    this.flags = flags;
    return this;
  }

  public void unsetFlags() {
    this.flags = null;
  }

  /** Returns true if field flags is set (has been assigned a value) and false otherwise */
  public boolean isSetFlags() {
    return this.flags != null;
  }

  public void setFlagsIsSet(boolean value) {
    if (!value) {
      this.flags = null;
    }
  }

  public String getHighlightedName() {
    return this.highlightedName;
  }

  public FeatureName setHighlightedName(String highlightedName) {
    this.highlightedName = highlightedName;
    return this;
  }

  public void unsetHighlightedName() {
    this.highlightedName = null;
  }

  /** Returns true if field highlightedName is set (has been assigned a value) and false otherwise */
  public boolean isSetHighlightedName() {
    return this.highlightedName != null;
  }

  public void setHighlightedNameIsSet(boolean value) {
    if (!value) {
      this.highlightedName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case LANG:
      if (value == null) {
        unsetLang();
      } else {
        setLang((String)value);
      }
      break;

    case FLAGS:
      if (value == null) {
        unsetFlags();
      } else {
        setFlags((List<FeatureNameFlags>)value);
      }
      break;

    case HIGHLIGHTED_NAME:
      if (value == null) {
        unsetHighlightedName();
      } else {
        setHighlightedName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case LANG:
      return getLang();

    case FLAGS:
      return getFlags();

    case HIGHLIGHTED_NAME:
      return getHighlightedName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case LANG:
      return isSetLang();
    case FLAGS:
      return isSetFlags();
    case HIGHLIGHTED_NAME:
      return isSetHighlightedName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FeatureName)
      return this.equals((FeatureName)that);
    return false;
  }

  public boolean equals(FeatureName that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_lang = true && this.isSetLang();
    boolean that_present_lang = true && that.isSetLang();
    if (this_present_lang || that_present_lang) {
      if (!(this_present_lang && that_present_lang))
        return false;
      if (!this.lang.equals(that.lang))
        return false;
    }

    boolean this_present_flags = true && this.isSetFlags();
    boolean that_present_flags = true && that.isSetFlags();
    if (this_present_flags || that_present_flags) {
      if (!(this_present_flags && that_present_flags))
        return false;
      if (!this.flags.equals(that.flags))
        return false;
    }

    boolean this_present_highlightedName = true && this.isSetHighlightedName();
    boolean that_present_highlightedName = true && that.isSetHighlightedName();
    if (this_present_highlightedName || that_present_highlightedName) {
      if (!(this_present_highlightedName && that_present_highlightedName))
        return false;
      if (!this.highlightedName.equals(that.highlightedName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(FeatureName other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FeatureName typedOther = (FeatureName)other;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLang()).compareTo(typedOther.isSetLang());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLang()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lang, typedOther.lang);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlags()).compareTo(typedOther.isSetFlags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flags, typedOther.flags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHighlightedName()).compareTo(typedOther.isSetHighlightedName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHighlightedName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.highlightedName, typedOther.highlightedName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FeatureName(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lang:");
    if (this.lang == null) {
      sb.append("null");
    } else {
      sb.append(this.lang);
    }
    first = false;
    if (isSetFlags()) {
      if (!first) sb.append(", ");
      sb.append("flags:");
      if (this.flags == null) {
        sb.append("null");
      } else {
        sb.append(this.flags);
      }
      first = false;
    }
    if (isSetHighlightedName()) {
      if (!first) sb.append(", ");
      sb.append("highlightedName:");
      if (this.highlightedName == null) {
        sb.append("null");
      } else {
        sb.append(this.highlightedName);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FeatureNameStandardSchemeFactory implements SchemeFactory {
    public FeatureNameStandardScheme getScheme() {
      return new FeatureNameStandardScheme();
    }
  }

  private static class FeatureNameStandardScheme extends StandardScheme<FeatureName> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FeatureName struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LANG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lang = iprot.readString();
              struct.setLangIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FLAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.flags = new ArrayList<FeatureNameFlags>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  FeatureNameFlags _elem10; // required
                  _elem10 = FeatureNameFlags.findByValue(iprot.readI32());
                  struct.flags.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setFlagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HIGHLIGHTED_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.highlightedName = iprot.readString();
              struct.setHighlightedNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FeatureName struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.lang != null) {
        oprot.writeFieldBegin(LANG_FIELD_DESC);
        oprot.writeString(struct.lang);
        oprot.writeFieldEnd();
      }
      if (struct.flags != null) {
        if (struct.isSetFlags()) {
          oprot.writeFieldBegin(FLAGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.flags.size()));
            for (FeatureNameFlags _iter11 : struct.flags)
            {
              oprot.writeI32(_iter11.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.highlightedName != null) {
        if (struct.isSetHighlightedName()) {
          oprot.writeFieldBegin(HIGHLIGHTED_NAME_FIELD_DESC);
          oprot.writeString(struct.highlightedName);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FeatureNameTupleSchemeFactory implements SchemeFactory {
    public FeatureNameTupleScheme getScheme() {
      return new FeatureNameTupleScheme();
    }
  }

  private static class FeatureNameTupleScheme extends TupleScheme<FeatureName> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FeatureName struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetLang()) {
        optionals.set(1);
      }
      if (struct.isSetFlags()) {
        optionals.set(2);
      }
      if (struct.isSetHighlightedName()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetLang()) {
        oprot.writeString(struct.lang);
      }
      if (struct.isSetFlags()) {
        {
          oprot.writeI32(struct.flags.size());
          for (FeatureNameFlags _iter12 : struct.flags)
          {
            oprot.writeI32(_iter12.getValue());
          }
        }
      }
      if (struct.isSetHighlightedName()) {
        oprot.writeString(struct.highlightedName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FeatureName struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.lang = iprot.readString();
        struct.setLangIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.flags = new ArrayList<FeatureNameFlags>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            FeatureNameFlags _elem15; // required
            _elem15 = FeatureNameFlags.findByValue(iprot.readI32());
            struct.flags.add(_elem15);
          }
        }
        struct.setFlagsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.highlightedName = iprot.readString();
        struct.setHighlightedNameIsSet(true);
      }
    }
  }

}

