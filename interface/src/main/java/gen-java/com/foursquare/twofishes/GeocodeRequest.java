/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.foursquare.twofishes;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class GeocodeRequest implements org.apache.thrift.TBase<GeocodeRequest, GeocodeRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GeocodeRequest");

  private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CC_FIELD_DESC = new org.apache.thrift.protocol.TField("cc", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LANG_FIELD_DESC = new org.apache.thrift.protocol.TField("lang", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LL_FIELD_DESC = new org.apache.thrift.protocol.TField("ll", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField FULL_FIELD_DESC = new org.apache.thrift.protocol.TField("full", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField DEBUG_FIELD_DESC = new org.apache.thrift.protocol.TField("debug", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField AUTOCOMPLETE_FIELD_DESC = new org.apache.thrift.protocol.TField("autocomplete", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField WOE_HINT_FIELD_DESC = new org.apache.thrift.protocol.TField("woeHint", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField WOE_RESTRICT_FIELD_DESC = new org.apache.thrift.protocol.TField("woeRestrict", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField BOUNDS_FIELD_DESC = new org.apache.thrift.protocol.TField("bounds", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField SLUG_FIELD_DESC = new org.apache.thrift.protocol.TField("slug", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField INCLUDE_POLYGON_FIELD_DESC = new org.apache.thrift.protocol.TField("includePolygon", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField WKT_GEOMETRY_FIELD_DESC = new org.apache.thrift.protocol.TField("wktGeometry", org.apache.thrift.protocol.TType.BOOL, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GeocodeRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GeocodeRequestTupleSchemeFactory());
  }

  public String query; // optional
  public String cc; // optional
  public String lang; // optional
  public GeocodePoint ll; // optional
  public boolean full; // optional
  public int debug; // optional
  public boolean autocomplete; // optional
  public List<YahooWoeType> woeHint; // optional
  public List<YahooWoeType> woeRestrict; // optional
  public GeocodeBoundingBox bounds; // optional
  public String slug; // optional
  public boolean includePolygon; // optional
  public boolean wktGeometry; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    QUERY((short)1, "query"),
    CC((short)2, "cc"),
    LANG((short)3, "lang"),
    LL((short)4, "ll"),
    FULL((short)5, "full"),
    DEBUG((short)6, "debug"),
    AUTOCOMPLETE((short)7, "autocomplete"),
    WOE_HINT((short)8, "woeHint"),
    WOE_RESTRICT((short)9, "woeRestrict"),
    BOUNDS((short)10, "bounds"),
    SLUG((short)11, "slug"),
    INCLUDE_POLYGON((short)12, "includePolygon"),
    WKT_GEOMETRY((short)13, "wktGeometry");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUERY
          return QUERY;
        case 2: // CC
          return CC;
        case 3: // LANG
          return LANG;
        case 4: // LL
          return LL;
        case 5: // FULL
          return FULL;
        case 6: // DEBUG
          return DEBUG;
        case 7: // AUTOCOMPLETE
          return AUTOCOMPLETE;
        case 8: // WOE_HINT
          return WOE_HINT;
        case 9: // WOE_RESTRICT
          return WOE_RESTRICT;
        case 10: // BOUNDS
          return BOUNDS;
        case 11: // SLUG
          return SLUG;
        case 12: // INCLUDE_POLYGON
          return INCLUDE_POLYGON;
        case 13: // WKT_GEOMETRY
          return WKT_GEOMETRY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FULL_ISSET_ID = 0;
  private static final int __DEBUG_ISSET_ID = 1;
  private static final int __AUTOCOMPLETE_ISSET_ID = 2;
  private static final int __INCLUDEPOLYGON_ISSET_ID = 3;
  private static final int __WKTGEOMETRY_ISSET_ID = 4;
  private BitSet __isset_bit_vector = new BitSet(5);
  private _Fields optionals[] = {_Fields.QUERY,_Fields.CC,_Fields.LANG,_Fields.LL,_Fields.FULL,_Fields.DEBUG,_Fields.AUTOCOMPLETE,_Fields.WOE_HINT,_Fields.WOE_RESTRICT,_Fields.BOUNDS,_Fields.SLUG,_Fields.INCLUDE_POLYGON,_Fields.WKT_GEOMETRY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CC, new org.apache.thrift.meta_data.FieldMetaData("cc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LANG, new org.apache.thrift.meta_data.FieldMetaData("lang", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LL, new org.apache.thrift.meta_data.FieldMetaData("ll", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GeocodePoint.class)));
    tmpMap.put(_Fields.FULL, new org.apache.thrift.meta_data.FieldMetaData("full", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DEBUG, new org.apache.thrift.meta_data.FieldMetaData("debug", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AUTOCOMPLETE, new org.apache.thrift.meta_data.FieldMetaData("autocomplete", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.WOE_HINT, new org.apache.thrift.meta_data.FieldMetaData("woeHint", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, YahooWoeType.class))));
    tmpMap.put(_Fields.WOE_RESTRICT, new org.apache.thrift.meta_data.FieldMetaData("woeRestrict", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, YahooWoeType.class))));
    tmpMap.put(_Fields.BOUNDS, new org.apache.thrift.meta_data.FieldMetaData("bounds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GeocodeBoundingBox.class)));
    tmpMap.put(_Fields.SLUG, new org.apache.thrift.meta_data.FieldMetaData("slug", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INCLUDE_POLYGON, new org.apache.thrift.meta_data.FieldMetaData("includePolygon", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.WKT_GEOMETRY, new org.apache.thrift.meta_data.FieldMetaData("wktGeometry", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GeocodeRequest.class, metaDataMap);
  }

  public GeocodeRequest() {
    this.lang = "en";

    this.full = false;

    this.debug = 0;

    this.autocomplete = false;

    this.woeHint = new ArrayList<YahooWoeType>();

    this.woeRestrict = new ArrayList<YahooWoeType>();

    this.includePolygon = false;

    this.wktGeometry = false;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GeocodeRequest(GeocodeRequest other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetQuery()) {
      this.query = other.query;
    }
    if (other.isSetCc()) {
      this.cc = other.cc;
    }
    if (other.isSetLang()) {
      this.lang = other.lang;
    }
    if (other.isSetLl()) {
      this.ll = new GeocodePoint(other.ll);
    }
    this.full = other.full;
    this.debug = other.debug;
    this.autocomplete = other.autocomplete;
    if (other.isSetWoeHint()) {
      List<YahooWoeType> __this__woeHint = new ArrayList<YahooWoeType>();
      for (YahooWoeType other_element : other.woeHint) {
        __this__woeHint.add(other_element);
      }
      this.woeHint = __this__woeHint;
    }
    if (other.isSetWoeRestrict()) {
      List<YahooWoeType> __this__woeRestrict = new ArrayList<YahooWoeType>();
      for (YahooWoeType other_element : other.woeRestrict) {
        __this__woeRestrict.add(other_element);
      }
      this.woeRestrict = __this__woeRestrict;
    }
    if (other.isSetBounds()) {
      this.bounds = new GeocodeBoundingBox(other.bounds);
    }
    if (other.isSetSlug()) {
      this.slug = other.slug;
    }
    this.includePolygon = other.includePolygon;
    this.wktGeometry = other.wktGeometry;
  }

  public GeocodeRequest deepCopy() {
    return new GeocodeRequest(this);
  }

  @Override
  public void clear() {
    this.query = null;
    this.cc = null;
    this.lang = "en";

    this.ll = null;
    this.full = false;

    this.debug = 0;

    this.autocomplete = false;

    this.woeHint = new ArrayList<YahooWoeType>();

    this.woeRestrict = new ArrayList<YahooWoeType>();

    this.bounds = null;
    this.slug = null;
    this.includePolygon = false;

    this.wktGeometry = false;

  }

  public String getQuery() {
    return this.query;
  }

  public GeocodeRequest setQuery(String query) {
    this.query = query;
    return this;
  }

  public void unsetQuery() {
    this.query = null;
  }

  /** Returns true if field query is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery() {
    return this.query != null;
  }

  public void setQueryIsSet(boolean value) {
    if (!value) {
      this.query = null;
    }
  }

  public String getCc() {
    return this.cc;
  }

  public GeocodeRequest setCc(String cc) {
    this.cc = cc;
    return this;
  }

  public void unsetCc() {
    this.cc = null;
  }

  /** Returns true if field cc is set (has been assigned a value) and false otherwise */
  public boolean isSetCc() {
    return this.cc != null;
  }

  public void setCcIsSet(boolean value) {
    if (!value) {
      this.cc = null;
    }
  }

  public String getLang() {
    return this.lang;
  }

  public GeocodeRequest setLang(String lang) {
    this.lang = lang;
    return this;
  }

  public void unsetLang() {
    this.lang = null;
  }

  /** Returns true if field lang is set (has been assigned a value) and false otherwise */
  public boolean isSetLang() {
    return this.lang != null;
  }

  public void setLangIsSet(boolean value) {
    if (!value) {
      this.lang = null;
    }
  }

  public GeocodePoint getLl() {
    return this.ll;
  }

  public GeocodeRequest setLl(GeocodePoint ll) {
    this.ll = ll;
    return this;
  }

  public void unsetLl() {
    this.ll = null;
  }

  /** Returns true if field ll is set (has been assigned a value) and false otherwise */
  public boolean isSetLl() {
    return this.ll != null;
  }

  public void setLlIsSet(boolean value) {
    if (!value) {
      this.ll = null;
    }
  }

  public boolean isFull() {
    return this.full;
  }

  public GeocodeRequest setFull(boolean full) {
    this.full = full;
    setFullIsSet(true);
    return this;
  }

  public void unsetFull() {
    __isset_bit_vector.clear(__FULL_ISSET_ID);
  }

  /** Returns true if field full is set (has been assigned a value) and false otherwise */
  public boolean isSetFull() {
    return __isset_bit_vector.get(__FULL_ISSET_ID);
  }

  public void setFullIsSet(boolean value) {
    __isset_bit_vector.set(__FULL_ISSET_ID, value);
  }

  public int getDebug() {
    return this.debug;
  }

  public GeocodeRequest setDebug(int debug) {
    this.debug = debug;
    setDebugIsSet(true);
    return this;
  }

  public void unsetDebug() {
    __isset_bit_vector.clear(__DEBUG_ISSET_ID);
  }

  /** Returns true if field debug is set (has been assigned a value) and false otherwise */
  public boolean isSetDebug() {
    return __isset_bit_vector.get(__DEBUG_ISSET_ID);
  }

  public void setDebugIsSet(boolean value) {
    __isset_bit_vector.set(__DEBUG_ISSET_ID, value);
  }

  public boolean isAutocomplete() {
    return this.autocomplete;
  }

  public GeocodeRequest setAutocomplete(boolean autocomplete) {
    this.autocomplete = autocomplete;
    setAutocompleteIsSet(true);
    return this;
  }

  public void unsetAutocomplete() {
    __isset_bit_vector.clear(__AUTOCOMPLETE_ISSET_ID);
  }

  /** Returns true if field autocomplete is set (has been assigned a value) and false otherwise */
  public boolean isSetAutocomplete() {
    return __isset_bit_vector.get(__AUTOCOMPLETE_ISSET_ID);
  }

  public void setAutocompleteIsSet(boolean value) {
    __isset_bit_vector.set(__AUTOCOMPLETE_ISSET_ID, value);
  }

  public int getWoeHintSize() {
    return (this.woeHint == null) ? 0 : this.woeHint.size();
  }

  public java.util.Iterator<YahooWoeType> getWoeHintIterator() {
    return (this.woeHint == null) ? null : this.woeHint.iterator();
  }

  public void addToWoeHint(YahooWoeType elem) {
    if (this.woeHint == null) {
      this.woeHint = new ArrayList<YahooWoeType>();
    }
    this.woeHint.add(elem);
  }

  public List<YahooWoeType> getWoeHint() {
    return this.woeHint;
  }

  public GeocodeRequest setWoeHint(List<YahooWoeType> woeHint) {
    this.woeHint = woeHint;
    return this;
  }

  public void unsetWoeHint() {
    this.woeHint = null;
  }

  /** Returns true if field woeHint is set (has been assigned a value) and false otherwise */
  public boolean isSetWoeHint() {
    return this.woeHint != null;
  }

  public void setWoeHintIsSet(boolean value) {
    if (!value) {
      this.woeHint = null;
    }
  }

  public int getWoeRestrictSize() {
    return (this.woeRestrict == null) ? 0 : this.woeRestrict.size();
  }

  public java.util.Iterator<YahooWoeType> getWoeRestrictIterator() {
    return (this.woeRestrict == null) ? null : this.woeRestrict.iterator();
  }

  public void addToWoeRestrict(YahooWoeType elem) {
    if (this.woeRestrict == null) {
      this.woeRestrict = new ArrayList<YahooWoeType>();
    }
    this.woeRestrict.add(elem);
  }

  public List<YahooWoeType> getWoeRestrict() {
    return this.woeRestrict;
  }

  public GeocodeRequest setWoeRestrict(List<YahooWoeType> woeRestrict) {
    this.woeRestrict = woeRestrict;
    return this;
  }

  public void unsetWoeRestrict() {
    this.woeRestrict = null;
  }

  /** Returns true if field woeRestrict is set (has been assigned a value) and false otherwise */
  public boolean isSetWoeRestrict() {
    return this.woeRestrict != null;
  }

  public void setWoeRestrictIsSet(boolean value) {
    if (!value) {
      this.woeRestrict = null;
    }
  }

  public GeocodeBoundingBox getBounds() {
    return this.bounds;
  }

  public GeocodeRequest setBounds(GeocodeBoundingBox bounds) {
    this.bounds = bounds;
    return this;
  }

  public void unsetBounds() {
    this.bounds = null;
  }

  /** Returns true if field bounds is set (has been assigned a value) and false otherwise */
  public boolean isSetBounds() {
    return this.bounds != null;
  }

  public void setBoundsIsSet(boolean value) {
    if (!value) {
      this.bounds = null;
    }
  }

  public String getSlug() {
    return this.slug;
  }

  public GeocodeRequest setSlug(String slug) {
    this.slug = slug;
    return this;
  }

  public void unsetSlug() {
    this.slug = null;
  }

  /** Returns true if field slug is set (has been assigned a value) and false otherwise */
  public boolean isSetSlug() {
    return this.slug != null;
  }

  public void setSlugIsSet(boolean value) {
    if (!value) {
      this.slug = null;
    }
  }

  public boolean isIncludePolygon() {
    return this.includePolygon;
  }

  public GeocodeRequest setIncludePolygon(boolean includePolygon) {
    this.includePolygon = includePolygon;
    setIncludePolygonIsSet(true);
    return this;
  }

  public void unsetIncludePolygon() {
    __isset_bit_vector.clear(__INCLUDEPOLYGON_ISSET_ID);
  }

  /** Returns true if field includePolygon is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludePolygon() {
    return __isset_bit_vector.get(__INCLUDEPOLYGON_ISSET_ID);
  }

  public void setIncludePolygonIsSet(boolean value) {
    __isset_bit_vector.set(__INCLUDEPOLYGON_ISSET_ID, value);
  }

  public boolean isWktGeometry() {
    return this.wktGeometry;
  }

  public GeocodeRequest setWktGeometry(boolean wktGeometry) {
    this.wktGeometry = wktGeometry;
    setWktGeometryIsSet(true);
    return this;
  }

  public void unsetWktGeometry() {
    __isset_bit_vector.clear(__WKTGEOMETRY_ISSET_ID);
  }

  /** Returns true if field wktGeometry is set (has been assigned a value) and false otherwise */
  public boolean isSetWktGeometry() {
    return __isset_bit_vector.get(__WKTGEOMETRY_ISSET_ID);
  }

  public void setWktGeometryIsSet(boolean value) {
    __isset_bit_vector.set(__WKTGEOMETRY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUERY:
      if (value == null) {
        unsetQuery();
      } else {
        setQuery((String)value);
      }
      break;

    case CC:
      if (value == null) {
        unsetCc();
      } else {
        setCc((String)value);
      }
      break;

    case LANG:
      if (value == null) {
        unsetLang();
      } else {
        setLang((String)value);
      }
      break;

    case LL:
      if (value == null) {
        unsetLl();
      } else {
        setLl((GeocodePoint)value);
      }
      break;

    case FULL:
      if (value == null) {
        unsetFull();
      } else {
        setFull((Boolean)value);
      }
      break;

    case DEBUG:
      if (value == null) {
        unsetDebug();
      } else {
        setDebug((Integer)value);
      }
      break;

    case AUTOCOMPLETE:
      if (value == null) {
        unsetAutocomplete();
      } else {
        setAutocomplete((Boolean)value);
      }
      break;

    case WOE_HINT:
      if (value == null) {
        unsetWoeHint();
      } else {
        setWoeHint((List<YahooWoeType>)value);
      }
      break;

    case WOE_RESTRICT:
      if (value == null) {
        unsetWoeRestrict();
      } else {
        setWoeRestrict((List<YahooWoeType>)value);
      }
      break;

    case BOUNDS:
      if (value == null) {
        unsetBounds();
      } else {
        setBounds((GeocodeBoundingBox)value);
      }
      break;

    case SLUG:
      if (value == null) {
        unsetSlug();
      } else {
        setSlug((String)value);
      }
      break;

    case INCLUDE_POLYGON:
      if (value == null) {
        unsetIncludePolygon();
      } else {
        setIncludePolygon((Boolean)value);
      }
      break;

    case WKT_GEOMETRY:
      if (value == null) {
        unsetWktGeometry();
      } else {
        setWktGeometry((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUERY:
      return getQuery();

    case CC:
      return getCc();

    case LANG:
      return getLang();

    case LL:
      return getLl();

    case FULL:
      return Boolean.valueOf(isFull());

    case DEBUG:
      return Integer.valueOf(getDebug());

    case AUTOCOMPLETE:
      return Boolean.valueOf(isAutocomplete());

    case WOE_HINT:
      return getWoeHint();

    case WOE_RESTRICT:
      return getWoeRestrict();

    case BOUNDS:
      return getBounds();

    case SLUG:
      return getSlug();

    case INCLUDE_POLYGON:
      return Boolean.valueOf(isIncludePolygon());

    case WKT_GEOMETRY:
      return Boolean.valueOf(isWktGeometry());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUERY:
      return isSetQuery();
    case CC:
      return isSetCc();
    case LANG:
      return isSetLang();
    case LL:
      return isSetLl();
    case FULL:
      return isSetFull();
    case DEBUG:
      return isSetDebug();
    case AUTOCOMPLETE:
      return isSetAutocomplete();
    case WOE_HINT:
      return isSetWoeHint();
    case WOE_RESTRICT:
      return isSetWoeRestrict();
    case BOUNDS:
      return isSetBounds();
    case SLUG:
      return isSetSlug();
    case INCLUDE_POLYGON:
      return isSetIncludePolygon();
    case WKT_GEOMETRY:
      return isSetWktGeometry();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GeocodeRequest)
      return this.equals((GeocodeRequest)that);
    return false;
  }

  public boolean equals(GeocodeRequest that) {
    if (that == null)
      return false;

    boolean this_present_query = true && this.isSetQuery();
    boolean that_present_query = true && that.isSetQuery();
    if (this_present_query || that_present_query) {
      if (!(this_present_query && that_present_query))
        return false;
      if (!this.query.equals(that.query))
        return false;
    }

    boolean this_present_cc = true && this.isSetCc();
    boolean that_present_cc = true && that.isSetCc();
    if (this_present_cc || that_present_cc) {
      if (!(this_present_cc && that_present_cc))
        return false;
      if (!this.cc.equals(that.cc))
        return false;
    }

    boolean this_present_lang = true && this.isSetLang();
    boolean that_present_lang = true && that.isSetLang();
    if (this_present_lang || that_present_lang) {
      if (!(this_present_lang && that_present_lang))
        return false;
      if (!this.lang.equals(that.lang))
        return false;
    }

    boolean this_present_ll = true && this.isSetLl();
    boolean that_present_ll = true && that.isSetLl();
    if (this_present_ll || that_present_ll) {
      if (!(this_present_ll && that_present_ll))
        return false;
      if (!this.ll.equals(that.ll))
        return false;
    }

    boolean this_present_full = true && this.isSetFull();
    boolean that_present_full = true && that.isSetFull();
    if (this_present_full || that_present_full) {
      if (!(this_present_full && that_present_full))
        return false;
      if (this.full != that.full)
        return false;
    }

    boolean this_present_debug = true && this.isSetDebug();
    boolean that_present_debug = true && that.isSetDebug();
    if (this_present_debug || that_present_debug) {
      if (!(this_present_debug && that_present_debug))
        return false;
      if (this.debug != that.debug)
        return false;
    }

    boolean this_present_autocomplete = true && this.isSetAutocomplete();
    boolean that_present_autocomplete = true && that.isSetAutocomplete();
    if (this_present_autocomplete || that_present_autocomplete) {
      if (!(this_present_autocomplete && that_present_autocomplete))
        return false;
      if (this.autocomplete != that.autocomplete)
        return false;
    }

    boolean this_present_woeHint = true && this.isSetWoeHint();
    boolean that_present_woeHint = true && that.isSetWoeHint();
    if (this_present_woeHint || that_present_woeHint) {
      if (!(this_present_woeHint && that_present_woeHint))
        return false;
      if (!this.woeHint.equals(that.woeHint))
        return false;
    }

    boolean this_present_woeRestrict = true && this.isSetWoeRestrict();
    boolean that_present_woeRestrict = true && that.isSetWoeRestrict();
    if (this_present_woeRestrict || that_present_woeRestrict) {
      if (!(this_present_woeRestrict && that_present_woeRestrict))
        return false;
      if (!this.woeRestrict.equals(that.woeRestrict))
        return false;
    }

    boolean this_present_bounds = true && this.isSetBounds();
    boolean that_present_bounds = true && that.isSetBounds();
    if (this_present_bounds || that_present_bounds) {
      if (!(this_present_bounds && that_present_bounds))
        return false;
      if (!this.bounds.equals(that.bounds))
        return false;
    }

    boolean this_present_slug = true && this.isSetSlug();
    boolean that_present_slug = true && that.isSetSlug();
    if (this_present_slug || that_present_slug) {
      if (!(this_present_slug && that_present_slug))
        return false;
      if (!this.slug.equals(that.slug))
        return false;
    }

    boolean this_present_includePolygon = true && this.isSetIncludePolygon();
    boolean that_present_includePolygon = true && that.isSetIncludePolygon();
    if (this_present_includePolygon || that_present_includePolygon) {
      if (!(this_present_includePolygon && that_present_includePolygon))
        return false;
      if (this.includePolygon != that.includePolygon)
        return false;
    }

    boolean this_present_wktGeometry = true && this.isSetWktGeometry();
    boolean that_present_wktGeometry = true && that.isSetWktGeometry();
    if (this_present_wktGeometry || that_present_wktGeometry) {
      if (!(this_present_wktGeometry && that_present_wktGeometry))
        return false;
      if (this.wktGeometry != that.wktGeometry)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(GeocodeRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    GeocodeRequest typedOther = (GeocodeRequest)other;

    lastComparison = Boolean.valueOf(isSetQuery()).compareTo(typedOther.isSetQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, typedOther.query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCc()).compareTo(typedOther.isSetCc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cc, typedOther.cc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLang()).compareTo(typedOther.isSetLang());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLang()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lang, typedOther.lang);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLl()).compareTo(typedOther.isSetLl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ll, typedOther.ll);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFull()).compareTo(typedOther.isSetFull());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFull()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.full, typedOther.full);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDebug()).compareTo(typedOther.isSetDebug());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebug()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debug, typedOther.debug);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAutocomplete()).compareTo(typedOther.isSetAutocomplete());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAutocomplete()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.autocomplete, typedOther.autocomplete);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWoeHint()).compareTo(typedOther.isSetWoeHint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWoeHint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.woeHint, typedOther.woeHint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWoeRestrict()).compareTo(typedOther.isSetWoeRestrict());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWoeRestrict()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.woeRestrict, typedOther.woeRestrict);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBounds()).compareTo(typedOther.isSetBounds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBounds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bounds, typedOther.bounds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSlug()).compareTo(typedOther.isSetSlug());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlug()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slug, typedOther.slug);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludePolygon()).compareTo(typedOther.isSetIncludePolygon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludePolygon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includePolygon, typedOther.includePolygon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWktGeometry()).compareTo(typedOther.isSetWktGeometry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWktGeometry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wktGeometry, typedOther.wktGeometry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GeocodeRequest(");
    boolean first = true;

    if (isSetQuery()) {
      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
    }
    if (isSetCc()) {
      if (!first) sb.append(", ");
      sb.append("cc:");
      if (this.cc == null) {
        sb.append("null");
      } else {
        sb.append(this.cc);
      }
      first = false;
    }
    if (isSetLang()) {
      if (!first) sb.append(", ");
      sb.append("lang:");
      if (this.lang == null) {
        sb.append("null");
      } else {
        sb.append(this.lang);
      }
      first = false;
    }
    if (isSetLl()) {
      if (!first) sb.append(", ");
      sb.append("ll:");
      if (this.ll == null) {
        sb.append("null");
      } else {
        sb.append(this.ll);
      }
      first = false;
    }
    if (isSetFull()) {
      if (!first) sb.append(", ");
      sb.append("full:");
      sb.append(this.full);
      first = false;
    }
    if (isSetDebug()) {
      if (!first) sb.append(", ");
      sb.append("debug:");
      sb.append(this.debug);
      first = false;
    }
    if (isSetAutocomplete()) {
      if (!first) sb.append(", ");
      sb.append("autocomplete:");
      sb.append(this.autocomplete);
      first = false;
    }
    if (isSetWoeHint()) {
      if (!first) sb.append(", ");
      sb.append("woeHint:");
      if (this.woeHint == null) {
        sb.append("null");
      } else {
        sb.append(this.woeHint);
      }
      first = false;
    }
    if (isSetWoeRestrict()) {
      if (!first) sb.append(", ");
      sb.append("woeRestrict:");
      if (this.woeRestrict == null) {
        sb.append("null");
      } else {
        sb.append(this.woeRestrict);
      }
      first = false;
    }
    if (isSetBounds()) {
      if (!first) sb.append(", ");
      sb.append("bounds:");
      if (this.bounds == null) {
        sb.append("null");
      } else {
        sb.append(this.bounds);
      }
      first = false;
    }
    if (isSetSlug()) {
      if (!first) sb.append(", ");
      sb.append("slug:");
      if (this.slug == null) {
        sb.append("null");
      } else {
        sb.append(this.slug);
      }
      first = false;
    }
    if (isSetIncludePolygon()) {
      if (!first) sb.append(", ");
      sb.append("includePolygon:");
      sb.append(this.includePolygon);
      first = false;
    }
    if (isSetWktGeometry()) {
      if (!first) sb.append(", ");
      sb.append("wktGeometry:");
      sb.append(this.wktGeometry);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GeocodeRequestStandardSchemeFactory implements SchemeFactory {
    public GeocodeRequestStandardScheme getScheme() {
      return new GeocodeRequestStandardScheme();
    }
  }

  private static class GeocodeRequestStandardScheme extends StandardScheme<GeocodeRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GeocodeRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.query = iprot.readString();
              struct.setQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cc = iprot.readString();
              struct.setCcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LANG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lang = iprot.readString();
              struct.setLangIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ll = new GeocodePoint();
              struct.ll.read(iprot);
              struct.setLlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FULL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.full = iprot.readBool();
              struct.setFullIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DEBUG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.debug = iprot.readI32();
              struct.setDebugIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // AUTOCOMPLETE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.autocomplete = iprot.readBool();
              struct.setAutocompleteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // WOE_HINT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                struct.woeHint = new ArrayList<YahooWoeType>(_list88.size);
                for (int _i89 = 0; _i89 < _list88.size; ++_i89)
                {
                  YahooWoeType _elem90; // required
                  _elem90 = YahooWoeType.findByValue(iprot.readI32());
                  struct.woeHint.add(_elem90);
                }
                iprot.readListEnd();
              }
              struct.setWoeHintIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // WOE_RESTRICT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list91 = iprot.readListBegin();
                struct.woeRestrict = new ArrayList<YahooWoeType>(_list91.size);
                for (int _i92 = 0; _i92 < _list91.size; ++_i92)
                {
                  YahooWoeType _elem93; // required
                  _elem93 = YahooWoeType.findByValue(iprot.readI32());
                  struct.woeRestrict.add(_elem93);
                }
                iprot.readListEnd();
              }
              struct.setWoeRestrictIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BOUNDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.bounds = new GeocodeBoundingBox();
              struct.bounds.read(iprot);
              struct.setBoundsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SLUG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.slug = iprot.readString();
              struct.setSlugIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // INCLUDE_POLYGON
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.includePolygon = iprot.readBool();
              struct.setIncludePolygonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // WKT_GEOMETRY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.wktGeometry = iprot.readBool();
              struct.setWktGeometryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GeocodeRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.query != null) {
        if (struct.isSetQuery()) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          oprot.writeString(struct.query);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cc != null) {
        if (struct.isSetCc()) {
          oprot.writeFieldBegin(CC_FIELD_DESC);
          oprot.writeString(struct.cc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lang != null) {
        if (struct.isSetLang()) {
          oprot.writeFieldBegin(LANG_FIELD_DESC);
          oprot.writeString(struct.lang);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ll != null) {
        if (struct.isSetLl()) {
          oprot.writeFieldBegin(LL_FIELD_DESC);
          struct.ll.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetFull()) {
        oprot.writeFieldBegin(FULL_FIELD_DESC);
        oprot.writeBool(struct.full);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDebug()) {
        oprot.writeFieldBegin(DEBUG_FIELD_DESC);
        oprot.writeI32(struct.debug);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAutocomplete()) {
        oprot.writeFieldBegin(AUTOCOMPLETE_FIELD_DESC);
        oprot.writeBool(struct.autocomplete);
        oprot.writeFieldEnd();
      }
      if (struct.woeHint != null) {
        if (struct.isSetWoeHint()) {
          oprot.writeFieldBegin(WOE_HINT_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.woeHint.size()));
            for (YahooWoeType _iter94 : struct.woeHint)
            {
              oprot.writeI32(_iter94.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.woeRestrict != null) {
        if (struct.isSetWoeRestrict()) {
          oprot.writeFieldBegin(WOE_RESTRICT_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.woeRestrict.size()));
            for (YahooWoeType _iter95 : struct.woeRestrict)
            {
              oprot.writeI32(_iter95.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.bounds != null) {
        if (struct.isSetBounds()) {
          oprot.writeFieldBegin(BOUNDS_FIELD_DESC);
          struct.bounds.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.slug != null) {
        if (struct.isSetSlug()) {
          oprot.writeFieldBegin(SLUG_FIELD_DESC);
          oprot.writeString(struct.slug);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIncludePolygon()) {
        oprot.writeFieldBegin(INCLUDE_POLYGON_FIELD_DESC);
        oprot.writeBool(struct.includePolygon);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWktGeometry()) {
        oprot.writeFieldBegin(WKT_GEOMETRY_FIELD_DESC);
        oprot.writeBool(struct.wktGeometry);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GeocodeRequestTupleSchemeFactory implements SchemeFactory {
    public GeocodeRequestTupleScheme getScheme() {
      return new GeocodeRequestTupleScheme();
    }
  }

  private static class GeocodeRequestTupleScheme extends TupleScheme<GeocodeRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GeocodeRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetQuery()) {
        optionals.set(0);
      }
      if (struct.isSetCc()) {
        optionals.set(1);
      }
      if (struct.isSetLang()) {
        optionals.set(2);
      }
      if (struct.isSetLl()) {
        optionals.set(3);
      }
      if (struct.isSetFull()) {
        optionals.set(4);
      }
      if (struct.isSetDebug()) {
        optionals.set(5);
      }
      if (struct.isSetAutocomplete()) {
        optionals.set(6);
      }
      if (struct.isSetWoeHint()) {
        optionals.set(7);
      }
      if (struct.isSetWoeRestrict()) {
        optionals.set(8);
      }
      if (struct.isSetBounds()) {
        optionals.set(9);
      }
      if (struct.isSetSlug()) {
        optionals.set(10);
      }
      if (struct.isSetIncludePolygon()) {
        optionals.set(11);
      }
      if (struct.isSetWktGeometry()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetQuery()) {
        oprot.writeString(struct.query);
      }
      if (struct.isSetCc()) {
        oprot.writeString(struct.cc);
      }
      if (struct.isSetLang()) {
        oprot.writeString(struct.lang);
      }
      if (struct.isSetLl()) {
        struct.ll.write(oprot);
      }
      if (struct.isSetFull()) {
        oprot.writeBool(struct.full);
      }
      if (struct.isSetDebug()) {
        oprot.writeI32(struct.debug);
      }
      if (struct.isSetAutocomplete()) {
        oprot.writeBool(struct.autocomplete);
      }
      if (struct.isSetWoeHint()) {
        {
          oprot.writeI32(struct.woeHint.size());
          for (YahooWoeType _iter96 : struct.woeHint)
          {
            oprot.writeI32(_iter96.getValue());
          }
        }
      }
      if (struct.isSetWoeRestrict()) {
        {
          oprot.writeI32(struct.woeRestrict.size());
          for (YahooWoeType _iter97 : struct.woeRestrict)
          {
            oprot.writeI32(_iter97.getValue());
          }
        }
      }
      if (struct.isSetBounds()) {
        struct.bounds.write(oprot);
      }
      if (struct.isSetSlug()) {
        oprot.writeString(struct.slug);
      }
      if (struct.isSetIncludePolygon()) {
        oprot.writeBool(struct.includePolygon);
      }
      if (struct.isSetWktGeometry()) {
        oprot.writeBool(struct.wktGeometry);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GeocodeRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.query = iprot.readString();
        struct.setQueryIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cc = iprot.readString();
        struct.setCcIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lang = iprot.readString();
        struct.setLangIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ll = new GeocodePoint();
        struct.ll.read(iprot);
        struct.setLlIsSet(true);
      }
      if (incoming.get(4)) {
        struct.full = iprot.readBool();
        struct.setFullIsSet(true);
      }
      if (incoming.get(5)) {
        struct.debug = iprot.readI32();
        struct.setDebugIsSet(true);
      }
      if (incoming.get(6)) {
        struct.autocomplete = iprot.readBool();
        struct.setAutocompleteIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list98 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.woeHint = new ArrayList<YahooWoeType>(_list98.size);
          for (int _i99 = 0; _i99 < _list98.size; ++_i99)
          {
            YahooWoeType _elem100; // required
            _elem100 = YahooWoeType.findByValue(iprot.readI32());
            struct.woeHint.add(_elem100);
          }
        }
        struct.setWoeHintIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.woeRestrict = new ArrayList<YahooWoeType>(_list101.size);
          for (int _i102 = 0; _i102 < _list101.size; ++_i102)
          {
            YahooWoeType _elem103; // required
            _elem103 = YahooWoeType.findByValue(iprot.readI32());
            struct.woeRestrict.add(_elem103);
          }
        }
        struct.setWoeRestrictIsSet(true);
      }
      if (incoming.get(9)) {
        struct.bounds = new GeocodeBoundingBox();
        struct.bounds.read(iprot);
        struct.setBoundsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.slug = iprot.readString();
        struct.setSlugIsSet(true);
      }
      if (incoming.get(11)) {
        struct.includePolygon = iprot.readBool();
        struct.setIncludePolygonIsSet(true);
      }
      if (incoming.get(12)) {
        struct.wktGeometry = iprot.readBool();
        struct.setWktGeometryIsSet(true);
      }
    }
  }

}

