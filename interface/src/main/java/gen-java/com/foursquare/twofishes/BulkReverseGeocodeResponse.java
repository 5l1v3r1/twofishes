/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.foursquare.twofishes;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class BulkReverseGeocodeResponse implements TBase<BulkReverseGeocodeResponse, BulkReverseGeocodeResponse._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("BulkReverseGeocodeResponse");

  private static final TField INTERPRETATION_MAP_FIELD_DESC = new TField("interpretationMap", TType.MAP, (short)1);

  public Map<Integer,GeocodeInterpretation> interpretationMap;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    INTERPRETATION_MAP((short)1, "interpretationMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INTERPRETATION_MAP
          return INTERPRETATION_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INTERPRETATION_MAP, new FieldMetaData("interpretationMap", TFieldRequirementType.REQUIRED, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I32), 
            new StructMetaData(TType.STRUCT, GeocodeInterpretation.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(BulkReverseGeocodeResponse.class, metaDataMap);
  }

  public BulkReverseGeocodeResponse() {
  }

  public BulkReverseGeocodeResponse(
    Map<Integer,GeocodeInterpretation> interpretationMap)
  {
    this();
    this.interpretationMap = interpretationMap;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BulkReverseGeocodeResponse(BulkReverseGeocodeResponse other) {
    if (other.isSetInterpretationMap()) {
      Map<Integer,GeocodeInterpretation> __this__interpretationMap = new HashMap<Integer,GeocodeInterpretation>();
      for (Map.Entry<Integer, GeocodeInterpretation> other_element : other.interpretationMap.entrySet()) {

        Integer other_element_key = other_element.getKey();
        GeocodeInterpretation other_element_value = other_element.getValue();

        Integer __this__interpretationMap_copy_key = other_element_key;

        GeocodeInterpretation __this__interpretationMap_copy_value = new GeocodeInterpretation(other_element_value);

        __this__interpretationMap.put(__this__interpretationMap_copy_key, __this__interpretationMap_copy_value);
      }
      this.interpretationMap = __this__interpretationMap;
    }
  }

  public BulkReverseGeocodeResponse deepCopy() {
    return new BulkReverseGeocodeResponse(this);
  }

  @Override
  public void clear() {
    this.interpretationMap = null;
  }

  public int getInterpretationMapSize() {
    return (this.interpretationMap == null) ? 0 : this.interpretationMap.size();
  }

  public void putToInterpretationMap(int key, GeocodeInterpretation val) {
    if (this.interpretationMap == null) {
      this.interpretationMap = new HashMap<Integer,GeocodeInterpretation>();
    }
    this.interpretationMap.put(key, val);
  }

  public Map<Integer,GeocodeInterpretation> getInterpretationMap() {
    return this.interpretationMap;
  }

  public BulkReverseGeocodeResponse setInterpretationMap(Map<Integer,GeocodeInterpretation> interpretationMap) {
    this.interpretationMap = interpretationMap;
    return this;
  }

  public void unsetInterpretationMap() {
    this.interpretationMap = null;
  }

  /** Returns true if field interpretationMap is set (has been asigned a value) and false otherwise */
  public boolean isSetInterpretationMap() {
    return this.interpretationMap != null;
  }

  public void setInterpretationMapIsSet(boolean value) {
    if (!value) {
      this.interpretationMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INTERPRETATION_MAP:
      if (value == null) {
        unsetInterpretationMap();
      } else {
        setInterpretationMap((Map<Integer,GeocodeInterpretation>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INTERPRETATION_MAP:
      return getInterpretationMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INTERPRETATION_MAP:
      return isSetInterpretationMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BulkReverseGeocodeResponse)
      return this.equals((BulkReverseGeocodeResponse)that);
    return false;
  }

  public boolean equals(BulkReverseGeocodeResponse that) {
    if (that == null)
      return false;

    boolean this_present_interpretationMap = true && this.isSetInterpretationMap();
    boolean that_present_interpretationMap = true && that.isSetInterpretationMap();
    if (this_present_interpretationMap || that_present_interpretationMap) {
      if (!(this_present_interpretationMap && that_present_interpretationMap))
        return false;
      if (!this.interpretationMap.equals(that.interpretationMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(BulkReverseGeocodeResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BulkReverseGeocodeResponse typedOther = (BulkReverseGeocodeResponse)other;

    lastComparison = Boolean.valueOf(isSetInterpretationMap()).compareTo(typedOther.isSetInterpretationMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterpretationMap()) {
      lastComparison = TBaseHelper.compareTo(this.interpretationMap, typedOther.interpretationMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // INTERPRETATION_MAP
          if (field.type == TType.MAP) {
            {
              TMap _map80 = iprot.readMapBegin();
              this.interpretationMap = new HashMap<Integer,GeocodeInterpretation>(2*_map80.size);
              for (int _i81 = 0; _i81 < _map80.size; ++_i81)
              {
                int _key82;
                GeocodeInterpretation _val83;
                _key82 = iprot.readI32();
                _val83 = new GeocodeInterpretation();
                _val83.read(iprot);
                this.interpretationMap.put(_key82, _val83);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.interpretationMap != null) {
      oprot.writeFieldBegin(INTERPRETATION_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I32, TType.STRUCT, this.interpretationMap.size()));
        for (Map.Entry<Integer, GeocodeInterpretation> _iter84 : this.interpretationMap.entrySet())
        {
          oprot.writeI32(_iter84.getKey());
          _iter84.getValue().write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BulkReverseGeocodeResponse(");
    boolean first = true;

    sb.append("interpretationMap:");
    if (this.interpretationMap == null) {
      sb.append("null");
    } else {
      sb.append(this.interpretationMap);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (interpretationMap == null) {
      throw new TProtocolException("Required field 'interpretationMap' was not present! Struct: " + toString());
    }
  }

}

