/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.foursquare.twofishes;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class InterpretationScoringFeatures implements TBase<InterpretationScoringFeatures, InterpretationScoringFeatures._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("InterpretationScoringFeatures");

  private static final TField POPULATION_FIELD_DESC = new TField("population", TType.I32, (short)1);
  private static final TField PERCENT_OF_REQUEST_COVERED_FIELD_DESC = new TField("percentOfRequestCovered", TType.DOUBLE, (short)2);
  private static final TField PERCENT_OF_FEATURE_COVERED_FIELD_DESC = new TField("percentOfFeatureCovered", TType.DOUBLE, (short)3);

  public int population;
  public double percentOfRequestCovered;
  public double percentOfFeatureCovered;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    POPULATION((short)1, "population"),
    PERCENT_OF_REQUEST_COVERED((short)2, "percentOfRequestCovered"),
    PERCENT_OF_FEATURE_COVERED((short)3, "percentOfFeatureCovered");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // POPULATION
          return POPULATION;
        case 2: // PERCENT_OF_REQUEST_COVERED
          return PERCENT_OF_REQUEST_COVERED;
        case 3: // PERCENT_OF_FEATURE_COVERED
          return PERCENT_OF_FEATURE_COVERED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __POPULATION_ISSET_ID = 0;
  private static final int __PERCENTOFREQUESTCOVERED_ISSET_ID = 1;
  private static final int __PERCENTOFFEATURECOVERED_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.POPULATION, new FieldMetaData("population", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.PERCENT_OF_REQUEST_COVERED, new FieldMetaData("percentOfRequestCovered", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.DOUBLE)));
    tmpMap.put(_Fields.PERCENT_OF_FEATURE_COVERED, new FieldMetaData("percentOfFeatureCovered", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(InterpretationScoringFeatures.class, metaDataMap);
  }

  public InterpretationScoringFeatures() {
    this.population = 0;

    this.percentOfRequestCovered = 0;

    this.percentOfFeatureCovered = 0;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public InterpretationScoringFeatures(InterpretationScoringFeatures other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.population = other.population;
    this.percentOfRequestCovered = other.percentOfRequestCovered;
    this.percentOfFeatureCovered = other.percentOfFeatureCovered;
  }

  public InterpretationScoringFeatures deepCopy() {
    return new InterpretationScoringFeatures(this);
  }

  @Override
  public void clear() {
    this.population = 0;

    this.percentOfRequestCovered = 0;

    this.percentOfFeatureCovered = 0;

  }

  public int getPopulation() {
    return this.population;
  }

  public InterpretationScoringFeatures setPopulation(int population) {
    this.population = population;
    setPopulationIsSet(true);
    return this;
  }

  public void unsetPopulation() {
    __isset_bit_vector.clear(__POPULATION_ISSET_ID);
  }

  /** Returns true if field population is set (has been asigned a value) and false otherwise */
  public boolean isSetPopulation() {
    return __isset_bit_vector.get(__POPULATION_ISSET_ID);
  }

  public void setPopulationIsSet(boolean value) {
    __isset_bit_vector.set(__POPULATION_ISSET_ID, value);
  }

  public double getPercentOfRequestCovered() {
    return this.percentOfRequestCovered;
  }

  public InterpretationScoringFeatures setPercentOfRequestCovered(double percentOfRequestCovered) {
    this.percentOfRequestCovered = percentOfRequestCovered;
    setPercentOfRequestCoveredIsSet(true);
    return this;
  }

  public void unsetPercentOfRequestCovered() {
    __isset_bit_vector.clear(__PERCENTOFREQUESTCOVERED_ISSET_ID);
  }

  /** Returns true if field percentOfRequestCovered is set (has been asigned a value) and false otherwise */
  public boolean isSetPercentOfRequestCovered() {
    return __isset_bit_vector.get(__PERCENTOFREQUESTCOVERED_ISSET_ID);
  }

  public void setPercentOfRequestCoveredIsSet(boolean value) {
    __isset_bit_vector.set(__PERCENTOFREQUESTCOVERED_ISSET_ID, value);
  }

  public double getPercentOfFeatureCovered() {
    return this.percentOfFeatureCovered;
  }

  public InterpretationScoringFeatures setPercentOfFeatureCovered(double percentOfFeatureCovered) {
    this.percentOfFeatureCovered = percentOfFeatureCovered;
    setPercentOfFeatureCoveredIsSet(true);
    return this;
  }

  public void unsetPercentOfFeatureCovered() {
    __isset_bit_vector.clear(__PERCENTOFFEATURECOVERED_ISSET_ID);
  }

  /** Returns true if field percentOfFeatureCovered is set (has been asigned a value) and false otherwise */
  public boolean isSetPercentOfFeatureCovered() {
    return __isset_bit_vector.get(__PERCENTOFFEATURECOVERED_ISSET_ID);
  }

  public void setPercentOfFeatureCoveredIsSet(boolean value) {
    __isset_bit_vector.set(__PERCENTOFFEATURECOVERED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case POPULATION:
      if (value == null) {
        unsetPopulation();
      } else {
        setPopulation((Integer)value);
      }
      break;

    case PERCENT_OF_REQUEST_COVERED:
      if (value == null) {
        unsetPercentOfRequestCovered();
      } else {
        setPercentOfRequestCovered((Double)value);
      }
      break;

    case PERCENT_OF_FEATURE_COVERED:
      if (value == null) {
        unsetPercentOfFeatureCovered();
      } else {
        setPercentOfFeatureCovered((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case POPULATION:
      return new Integer(getPopulation());

    case PERCENT_OF_REQUEST_COVERED:
      return new Double(getPercentOfRequestCovered());

    case PERCENT_OF_FEATURE_COVERED:
      return new Double(getPercentOfFeatureCovered());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case POPULATION:
      return isSetPopulation();
    case PERCENT_OF_REQUEST_COVERED:
      return isSetPercentOfRequestCovered();
    case PERCENT_OF_FEATURE_COVERED:
      return isSetPercentOfFeatureCovered();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof InterpretationScoringFeatures)
      return this.equals((InterpretationScoringFeatures)that);
    return false;
  }

  public boolean equals(InterpretationScoringFeatures that) {
    if (that == null)
      return false;

    boolean this_present_population = true && this.isSetPopulation();
    boolean that_present_population = true && that.isSetPopulation();
    if (this_present_population || that_present_population) {
      if (!(this_present_population && that_present_population))
        return false;
      if (this.population != that.population)
        return false;
    }

    boolean this_present_percentOfRequestCovered = true && this.isSetPercentOfRequestCovered();
    boolean that_present_percentOfRequestCovered = true && that.isSetPercentOfRequestCovered();
    if (this_present_percentOfRequestCovered || that_present_percentOfRequestCovered) {
      if (!(this_present_percentOfRequestCovered && that_present_percentOfRequestCovered))
        return false;
      if (this.percentOfRequestCovered != that.percentOfRequestCovered)
        return false;
    }

    boolean this_present_percentOfFeatureCovered = true && this.isSetPercentOfFeatureCovered();
    boolean that_present_percentOfFeatureCovered = true && that.isSetPercentOfFeatureCovered();
    if (this_present_percentOfFeatureCovered || that_present_percentOfFeatureCovered) {
      if (!(this_present_percentOfFeatureCovered && that_present_percentOfFeatureCovered))
        return false;
      if (this.percentOfFeatureCovered != that.percentOfFeatureCovered)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(InterpretationScoringFeatures other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    InterpretationScoringFeatures typedOther = (InterpretationScoringFeatures)other;

    lastComparison = Boolean.valueOf(isSetPopulation()).compareTo(typedOther.isSetPopulation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPopulation()) {
      lastComparison = TBaseHelper.compareTo(this.population, typedOther.population);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPercentOfRequestCovered()).compareTo(typedOther.isSetPercentOfRequestCovered());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPercentOfRequestCovered()) {
      lastComparison = TBaseHelper.compareTo(this.percentOfRequestCovered, typedOther.percentOfRequestCovered);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPercentOfFeatureCovered()).compareTo(typedOther.isSetPercentOfFeatureCovered());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPercentOfFeatureCovered()) {
      lastComparison = TBaseHelper.compareTo(this.percentOfFeatureCovered, typedOther.percentOfFeatureCovered);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // POPULATION
          if (field.type == TType.I32) {
            this.population = iprot.readI32();
            setPopulationIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // PERCENT_OF_REQUEST_COVERED
          if (field.type == TType.DOUBLE) {
            this.percentOfRequestCovered = iprot.readDouble();
            setPercentOfRequestCoveredIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // PERCENT_OF_FEATURE_COVERED
          if (field.type == TType.DOUBLE) {
            this.percentOfFeatureCovered = iprot.readDouble();
            setPercentOfFeatureCoveredIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (isSetPopulation()) {
      oprot.writeFieldBegin(POPULATION_FIELD_DESC);
      oprot.writeI32(this.population);
      oprot.writeFieldEnd();
    }
    if (isSetPercentOfRequestCovered()) {
      oprot.writeFieldBegin(PERCENT_OF_REQUEST_COVERED_FIELD_DESC);
      oprot.writeDouble(this.percentOfRequestCovered);
      oprot.writeFieldEnd();
    }
    if (isSetPercentOfFeatureCovered()) {
      oprot.writeFieldBegin(PERCENT_OF_FEATURE_COVERED_FIELD_DESC);
      oprot.writeDouble(this.percentOfFeatureCovered);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("InterpretationScoringFeatures(");
    boolean first = true;

    if (isSetPopulation()) {
      sb.append("population:");
      sb.append(this.population);
      first = false;
    }
    if (isSetPercentOfRequestCovered()) {
      if (!first) sb.append(", ");
      sb.append("percentOfRequestCovered:");
      sb.append(this.percentOfRequestCovered);
      first = false;
    }
    if (isSetPercentOfFeatureCovered()) {
      if (!first) sb.append(", ");
      sb.append("percentOfFeatureCovered:");
      sb.append(this.percentOfFeatureCovered);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

