/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.foursquare.twofishes;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class GeocodeInterpretation implements org.apache.thrift.TBase<GeocodeInterpretation, GeocodeInterpretation._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GeocodeInterpretation");

  private static final org.apache.thrift.protocol.TField WHAT_FIELD_DESC = new org.apache.thrift.protocol.TField("what", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField WHERE_FIELD_DESC = new org.apache.thrift.protocol.TField("where", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FEATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("feature", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField PARENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("parents", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField SCORING_FEATURES_FIELD_DESC = new org.apache.thrift.protocol.TField("scoringFeatures", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GeocodeInterpretationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GeocodeInterpretationTupleSchemeFactory());
  }

  public String what; // required
  public String where; // required
  public GeocodeFeature feature; // required
  public List<GeocodeFeature> parents; // optional
  public ScoringFeatures scoringFeatures; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WHAT((short)1, "what"),
    WHERE((short)2, "where"),
    FEATURE((short)3, "feature"),
    PARENTS((short)4, "parents"),
    SCORING_FEATURES((short)5, "scoringFeatures");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WHAT
          return WHAT;
        case 2: // WHERE
          return WHERE;
        case 3: // FEATURE
          return FEATURE;
        case 4: // PARENTS
          return PARENTS;
        case 5: // SCORING_FEATURES
          return SCORING_FEATURES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.PARENTS,_Fields.SCORING_FEATURES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WHAT, new org.apache.thrift.meta_data.FieldMetaData("what", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WHERE, new org.apache.thrift.meta_data.FieldMetaData("where", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FEATURE, new org.apache.thrift.meta_data.FieldMetaData("feature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GeocodeFeature.class)));
    tmpMap.put(_Fields.PARENTS, new org.apache.thrift.meta_data.FieldMetaData("parents", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GeocodeFeature.class))));
    tmpMap.put(_Fields.SCORING_FEATURES, new org.apache.thrift.meta_data.FieldMetaData("scoringFeatures", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ScoringFeatures.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GeocodeInterpretation.class, metaDataMap);
  }

  public GeocodeInterpretation() {
  }

  public GeocodeInterpretation(
    String what,
    String where,
    GeocodeFeature feature)
  {
    this();
    this.what = what;
    this.where = where;
    this.feature = feature;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GeocodeInterpretation(GeocodeInterpretation other) {
    if (other.isSetWhat()) {
      this.what = other.what;
    }
    if (other.isSetWhere()) {
      this.where = other.where;
    }
    if (other.isSetFeature()) {
      this.feature = new GeocodeFeature(other.feature);
    }
    if (other.isSetParents()) {
      List<GeocodeFeature> __this__parents = new ArrayList<GeocodeFeature>();
      for (GeocodeFeature other_element : other.parents) {
        __this__parents.add(new GeocodeFeature(other_element));
      }
      this.parents = __this__parents;
    }
    if (other.isSetScoringFeatures()) {
      this.scoringFeatures = new ScoringFeatures(other.scoringFeatures);
    }
  }

  public GeocodeInterpretation deepCopy() {
    return new GeocodeInterpretation(this);
  }

  @Override
  public void clear() {
    this.what = null;
    this.where = null;
    this.feature = null;
    this.parents = null;
    this.scoringFeatures = null;
  }

  public String getWhat() {
    return this.what;
  }

  public GeocodeInterpretation setWhat(String what) {
    this.what = what;
    return this;
  }

  public void unsetWhat() {
    this.what = null;
  }

  /** Returns true if field what is set (has been assigned a value) and false otherwise */
  public boolean isSetWhat() {
    return this.what != null;
  }

  public void setWhatIsSet(boolean value) {
    if (!value) {
      this.what = null;
    }
  }

  public String getWhere() {
    return this.where;
  }

  public GeocodeInterpretation setWhere(String where) {
    this.where = where;
    return this;
  }

  public void unsetWhere() {
    this.where = null;
  }

  /** Returns true if field where is set (has been assigned a value) and false otherwise */
  public boolean isSetWhere() {
    return this.where != null;
  }

  public void setWhereIsSet(boolean value) {
    if (!value) {
      this.where = null;
    }
  }

  public GeocodeFeature getFeature() {
    return this.feature;
  }

  public GeocodeInterpretation setFeature(GeocodeFeature feature) {
    this.feature = feature;
    return this;
  }

  public void unsetFeature() {
    this.feature = null;
  }

  /** Returns true if field feature is set (has been assigned a value) and false otherwise */
  public boolean isSetFeature() {
    return this.feature != null;
  }

  public void setFeatureIsSet(boolean value) {
    if (!value) {
      this.feature = null;
    }
  }

  public int getParentsSize() {
    return (this.parents == null) ? 0 : this.parents.size();
  }

  public java.util.Iterator<GeocodeFeature> getParentsIterator() {
    return (this.parents == null) ? null : this.parents.iterator();
  }

  public void addToParents(GeocodeFeature elem) {
    if (this.parents == null) {
      this.parents = new ArrayList<GeocodeFeature>();
    }
    this.parents.add(elem);
  }

  public List<GeocodeFeature> getParents() {
    return this.parents;
  }

  public GeocodeInterpretation setParents(List<GeocodeFeature> parents) {
    this.parents = parents;
    return this;
  }

  public void unsetParents() {
    this.parents = null;
  }

  /** Returns true if field parents is set (has been assigned a value) and false otherwise */
  public boolean isSetParents() {
    return this.parents != null;
  }

  public void setParentsIsSet(boolean value) {
    if (!value) {
      this.parents = null;
    }
  }

  public ScoringFeatures getScoringFeatures() {
    return this.scoringFeatures;
  }

  public GeocodeInterpretation setScoringFeatures(ScoringFeatures scoringFeatures) {
    this.scoringFeatures = scoringFeatures;
    return this;
  }

  public void unsetScoringFeatures() {
    this.scoringFeatures = null;
  }

  /** Returns true if field scoringFeatures is set (has been assigned a value) and false otherwise */
  public boolean isSetScoringFeatures() {
    return this.scoringFeatures != null;
  }

  public void setScoringFeaturesIsSet(boolean value) {
    if (!value) {
      this.scoringFeatures = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case WHAT:
      if (value == null) {
        unsetWhat();
      } else {
        setWhat((String)value);
      }
      break;

    case WHERE:
      if (value == null) {
        unsetWhere();
      } else {
        setWhere((String)value);
      }
      break;

    case FEATURE:
      if (value == null) {
        unsetFeature();
      } else {
        setFeature((GeocodeFeature)value);
      }
      break;

    case PARENTS:
      if (value == null) {
        unsetParents();
      } else {
        setParents((List<GeocodeFeature>)value);
      }
      break;

    case SCORING_FEATURES:
      if (value == null) {
        unsetScoringFeatures();
      } else {
        setScoringFeatures((ScoringFeatures)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case WHAT:
      return getWhat();

    case WHERE:
      return getWhere();

    case FEATURE:
      return getFeature();

    case PARENTS:
      return getParents();

    case SCORING_FEATURES:
      return getScoringFeatures();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case WHAT:
      return isSetWhat();
    case WHERE:
      return isSetWhere();
    case FEATURE:
      return isSetFeature();
    case PARENTS:
      return isSetParents();
    case SCORING_FEATURES:
      return isSetScoringFeatures();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GeocodeInterpretation)
      return this.equals((GeocodeInterpretation)that);
    return false;
  }

  public boolean equals(GeocodeInterpretation that) {
    if (that == null)
      return false;

    boolean this_present_what = true && this.isSetWhat();
    boolean that_present_what = true && that.isSetWhat();
    if (this_present_what || that_present_what) {
      if (!(this_present_what && that_present_what))
        return false;
      if (!this.what.equals(that.what))
        return false;
    }

    boolean this_present_where = true && this.isSetWhere();
    boolean that_present_where = true && that.isSetWhere();
    if (this_present_where || that_present_where) {
      if (!(this_present_where && that_present_where))
        return false;
      if (!this.where.equals(that.where))
        return false;
    }

    boolean this_present_feature = true && this.isSetFeature();
    boolean that_present_feature = true && that.isSetFeature();
    if (this_present_feature || that_present_feature) {
      if (!(this_present_feature && that_present_feature))
        return false;
      if (!this.feature.equals(that.feature))
        return false;
    }

    boolean this_present_parents = true && this.isSetParents();
    boolean that_present_parents = true && that.isSetParents();
    if (this_present_parents || that_present_parents) {
      if (!(this_present_parents && that_present_parents))
        return false;
      if (!this.parents.equals(that.parents))
        return false;
    }

    boolean this_present_scoringFeatures = true && this.isSetScoringFeatures();
    boolean that_present_scoringFeatures = true && that.isSetScoringFeatures();
    if (this_present_scoringFeatures || that_present_scoringFeatures) {
      if (!(this_present_scoringFeatures && that_present_scoringFeatures))
        return false;
      if (!this.scoringFeatures.equals(that.scoringFeatures))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(GeocodeInterpretation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    GeocodeInterpretation typedOther = (GeocodeInterpretation)other;

    lastComparison = Boolean.valueOf(isSetWhat()).compareTo(typedOther.isSetWhat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWhat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.what, typedOther.what);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWhere()).compareTo(typedOther.isSetWhere());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWhere()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.where, typedOther.where);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeature()).compareTo(typedOther.isSetFeature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature, typedOther.feature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParents()).compareTo(typedOther.isSetParents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parents, typedOther.parents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScoringFeatures()).compareTo(typedOther.isSetScoringFeatures());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScoringFeatures()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scoringFeatures, typedOther.scoringFeatures);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GeocodeInterpretation(");
    boolean first = true;

    sb.append("what:");
    if (this.what == null) {
      sb.append("null");
    } else {
      sb.append(this.what);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("where:");
    if (this.where == null) {
      sb.append("null");
    } else {
      sb.append(this.where);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("feature:");
    if (this.feature == null) {
      sb.append("null");
    } else {
      sb.append(this.feature);
    }
    first = false;
    if (isSetParents()) {
      if (!first) sb.append(", ");
      sb.append("parents:");
      if (this.parents == null) {
        sb.append("null");
      } else {
        sb.append(this.parents);
      }
      first = false;
    }
    if (isSetScoringFeatures()) {
      if (!first) sb.append(", ");
      sb.append("scoringFeatures:");
      if (this.scoringFeatures == null) {
        sb.append("null");
      } else {
        sb.append(this.scoringFeatures);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GeocodeInterpretationStandardSchemeFactory implements SchemeFactory {
    public GeocodeInterpretationStandardScheme getScheme() {
      return new GeocodeInterpretationStandardScheme();
    }
  }

  private static class GeocodeInterpretationStandardScheme extends StandardScheme<GeocodeInterpretation> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GeocodeInterpretation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WHAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.what = iprot.readString();
              struct.setWhatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WHERE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.where = iprot.readString();
              struct.setWhereIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FEATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.feature = new GeocodeFeature();
              struct.feature.read(iprot);
              struct.setFeatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                struct.parents = new ArrayList<GeocodeFeature>(_list64.size);
                for (int _i65 = 0; _i65 < _list64.size; ++_i65)
                {
                  GeocodeFeature _elem66; // required
                  _elem66 = new GeocodeFeature();
                  _elem66.read(iprot);
                  struct.parents.add(_elem66);
                }
                iprot.readListEnd();
              }
              struct.setParentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SCORING_FEATURES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.scoringFeatures = new ScoringFeatures();
              struct.scoringFeatures.read(iprot);
              struct.setScoringFeaturesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GeocodeInterpretation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.what != null) {
        oprot.writeFieldBegin(WHAT_FIELD_DESC);
        oprot.writeString(struct.what);
        oprot.writeFieldEnd();
      }
      if (struct.where != null) {
        oprot.writeFieldBegin(WHERE_FIELD_DESC);
        oprot.writeString(struct.where);
        oprot.writeFieldEnd();
      }
      if (struct.feature != null) {
        oprot.writeFieldBegin(FEATURE_FIELD_DESC);
        struct.feature.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.parents != null) {
        if (struct.isSetParents()) {
          oprot.writeFieldBegin(PARENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.parents.size()));
            for (GeocodeFeature _iter67 : struct.parents)
            {
              _iter67.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.scoringFeatures != null) {
        if (struct.isSetScoringFeatures()) {
          oprot.writeFieldBegin(SCORING_FEATURES_FIELD_DESC);
          struct.scoringFeatures.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GeocodeInterpretationTupleSchemeFactory implements SchemeFactory {
    public GeocodeInterpretationTupleScheme getScheme() {
      return new GeocodeInterpretationTupleScheme();
    }
  }

  private static class GeocodeInterpretationTupleScheme extends TupleScheme<GeocodeInterpretation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GeocodeInterpretation struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetWhat()) {
        optionals.set(0);
      }
      if (struct.isSetWhere()) {
        optionals.set(1);
      }
      if (struct.isSetFeature()) {
        optionals.set(2);
      }
      if (struct.isSetParents()) {
        optionals.set(3);
      }
      if (struct.isSetScoringFeatures()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetWhat()) {
        oprot.writeString(struct.what);
      }
      if (struct.isSetWhere()) {
        oprot.writeString(struct.where);
      }
      if (struct.isSetFeature()) {
        struct.feature.write(oprot);
      }
      if (struct.isSetParents()) {
        {
          oprot.writeI32(struct.parents.size());
          for (GeocodeFeature _iter68 : struct.parents)
          {
            _iter68.write(oprot);
          }
        }
      }
      if (struct.isSetScoringFeatures()) {
        struct.scoringFeatures.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GeocodeInterpretation struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.what = iprot.readString();
        struct.setWhatIsSet(true);
      }
      if (incoming.get(1)) {
        struct.where = iprot.readString();
        struct.setWhereIsSet(true);
      }
      if (incoming.get(2)) {
        struct.feature = new GeocodeFeature();
        struct.feature.read(iprot);
        struct.setFeatureIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.parents = new ArrayList<GeocodeFeature>(_list69.size);
          for (int _i70 = 0; _i70 < _list69.size; ++_i70)
          {
            GeocodeFeature _elem71; // required
            _elem71 = new GeocodeFeature();
            _elem71.read(iprot);
            struct.parents.add(_elem71);
          }
        }
        struct.setParentsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.scoringFeatures = new ScoringFeatures();
        struct.scoringFeatures.read(iprot);
        struct.setScoringFeaturesIsSet(true);
      }
    }
  }

}

