/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.foursquare.twofishes;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class GeocodeServingFeature implements TBase<GeocodeServingFeature, GeocodeServingFeature._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("GeocodeServingFeature");

  private static final TField LONG_ID_FIELD_DESC = new TField("longId", TType.I64, (short)5);
  private static final TField SCORING_FEATURES_FIELD_DESC = new TField("scoringFeatures", TType.STRUCT, (short)2);
  private static final TField FEATURE_FIELD_DESC = new TField("feature", TType.STRUCT, (short)3);
  private static final TField PARENTS_FIELD_DESC = new TField("parents", TType.LIST, (short)4);
  private static final TField DEPRECATED_ID_FIELD_DESC = new TField("DEPRECATED_id", TType.STRING, (short)1);

  public long longId;
  public ScoringFeatures scoringFeatures;
  public GeocodeFeature feature;
  public List<GeocodeFeature> parents;
  public String DEPRECATED_id;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    LONG_ID((short)5, "longId"),
    SCORING_FEATURES((short)2, "scoringFeatures"),
    FEATURE((short)3, "feature"),
    PARENTS((short)4, "parents"),
    DEPRECATED_ID((short)1, "DEPRECATED_id");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 5: // LONG_ID
          return LONG_ID;
        case 2: // SCORING_FEATURES
          return SCORING_FEATURES;
        case 3: // FEATURE
          return FEATURE;
        case 4: // PARENTS
          return PARENTS;
        case 1: // DEPRECATED_ID
          return DEPRECATED_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LONGID_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LONG_ID, new FieldMetaData("longId", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.SCORING_FEATURES, new FieldMetaData("scoringFeatures", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, ScoringFeatures.class)));
    tmpMap.put(_Fields.FEATURE, new FieldMetaData("feature", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, GeocodeFeature.class)));
    tmpMap.put(_Fields.PARENTS, new FieldMetaData("parents", TFieldRequirementType.OPTIONAL, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, GeocodeFeature.class))));
    tmpMap.put(_Fields.DEPRECATED_ID, new FieldMetaData("DEPRECATED_id", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(GeocodeServingFeature.class, metaDataMap);
  }

  public GeocodeServingFeature() {
  }

  public GeocodeServingFeature(
    long longId,
    ScoringFeatures scoringFeatures,
    GeocodeFeature feature,
    String DEPRECATED_id)
  {
    this();
    this.longId = longId;
    setLongIdIsSet(true);
    this.scoringFeatures = scoringFeatures;
    this.feature = feature;
    this.DEPRECATED_id = DEPRECATED_id;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GeocodeServingFeature(GeocodeServingFeature other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.longId = other.longId;
    if (other.isSetScoringFeatures()) {
      this.scoringFeatures = new ScoringFeatures(other.scoringFeatures);
    }
    if (other.isSetFeature()) {
      this.feature = new GeocodeFeature(other.feature);
    }
    if (other.isSetParents()) {
      List<GeocodeFeature> __this__parents = new ArrayList<GeocodeFeature>();
      for (GeocodeFeature other_element : other.parents) {
        __this__parents.add(new GeocodeFeature(other_element));
      }
      this.parents = __this__parents;
    }
    if (other.isSetDEPRECATED_id()) {
      this.DEPRECATED_id = other.DEPRECATED_id;
    }
  }

  public GeocodeServingFeature deepCopy() {
    return new GeocodeServingFeature(this);
  }

  @Override
  public void clear() {
    setLongIdIsSet(false);
    this.longId = 0;
    this.scoringFeatures = null;
    this.feature = null;
    this.parents = null;
    this.DEPRECATED_id = null;
  }

  public long getLongId() {
    return this.longId;
  }

  public GeocodeServingFeature setLongId(long longId) {
    this.longId = longId;
    setLongIdIsSet(true);
    return this;
  }

  public void unsetLongId() {
    __isset_bit_vector.clear(__LONGID_ISSET_ID);
  }

  /** Returns true if field longId is set (has been asigned a value) and false otherwise */
  public boolean isSetLongId() {
    return __isset_bit_vector.get(__LONGID_ISSET_ID);
  }

  public void setLongIdIsSet(boolean value) {
    __isset_bit_vector.set(__LONGID_ISSET_ID, value);
  }

  public ScoringFeatures getScoringFeatures() {
    return this.scoringFeatures;
  }

  public GeocodeServingFeature setScoringFeatures(ScoringFeatures scoringFeatures) {
    this.scoringFeatures = scoringFeatures;
    return this;
  }

  public void unsetScoringFeatures() {
    this.scoringFeatures = null;
  }

  /** Returns true if field scoringFeatures is set (has been asigned a value) and false otherwise */
  public boolean isSetScoringFeatures() {
    return this.scoringFeatures != null;
  }

  public void setScoringFeaturesIsSet(boolean value) {
    if (!value) {
      this.scoringFeatures = null;
    }
  }

  public GeocodeFeature getFeature() {
    return this.feature;
  }

  public GeocodeServingFeature setFeature(GeocodeFeature feature) {
    this.feature = feature;
    return this;
  }

  public void unsetFeature() {
    this.feature = null;
  }

  /** Returns true if field feature is set (has been asigned a value) and false otherwise */
  public boolean isSetFeature() {
    return this.feature != null;
  }

  public void setFeatureIsSet(boolean value) {
    if (!value) {
      this.feature = null;
    }
  }

  public int getParentsSize() {
    return (this.parents == null) ? 0 : this.parents.size();
  }

  public java.util.Iterator<GeocodeFeature> getParentsIterator() {
    return (this.parents == null) ? null : this.parents.iterator();
  }

  public void addToParents(GeocodeFeature elem) {
    if (this.parents == null) {
      this.parents = new ArrayList<GeocodeFeature>();
    }
    this.parents.add(elem);
  }

  public List<GeocodeFeature> getParents() {
    return this.parents;
  }

  public GeocodeServingFeature setParents(List<GeocodeFeature> parents) {
    this.parents = parents;
    return this;
  }

  public void unsetParents() {
    this.parents = null;
  }

  /** Returns true if field parents is set (has been asigned a value) and false otherwise */
  public boolean isSetParents() {
    return this.parents != null;
  }

  public void setParentsIsSet(boolean value) {
    if (!value) {
      this.parents = null;
    }
  }

  public String getDEPRECATED_id() {
    return this.DEPRECATED_id;
  }

  public GeocodeServingFeature setDEPRECATED_id(String DEPRECATED_id) {
    this.DEPRECATED_id = DEPRECATED_id;
    return this;
  }

  public void unsetDEPRECATED_id() {
    this.DEPRECATED_id = null;
  }

  /** Returns true if field DEPRECATED_id is set (has been asigned a value) and false otherwise */
  public boolean isSetDEPRECATED_id() {
    return this.DEPRECATED_id != null;
  }

  public void setDEPRECATED_idIsSet(boolean value) {
    if (!value) {
      this.DEPRECATED_id = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LONG_ID:
      if (value == null) {
        unsetLongId();
      } else {
        setLongId((Long)value);
      }
      break;

    case SCORING_FEATURES:
      if (value == null) {
        unsetScoringFeatures();
      } else {
        setScoringFeatures((ScoringFeatures)value);
      }
      break;

    case FEATURE:
      if (value == null) {
        unsetFeature();
      } else {
        setFeature((GeocodeFeature)value);
      }
      break;

    case PARENTS:
      if (value == null) {
        unsetParents();
      } else {
        setParents((List<GeocodeFeature>)value);
      }
      break;

    case DEPRECATED_ID:
      if (value == null) {
        unsetDEPRECATED_id();
      } else {
        setDEPRECATED_id((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LONG_ID:
      return new Long(getLongId());

    case SCORING_FEATURES:
      return getScoringFeatures();

    case FEATURE:
      return getFeature();

    case PARENTS:
      return getParents();

    case DEPRECATED_ID:
      return getDEPRECATED_id();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LONG_ID:
      return isSetLongId();
    case SCORING_FEATURES:
      return isSetScoringFeatures();
    case FEATURE:
      return isSetFeature();
    case PARENTS:
      return isSetParents();
    case DEPRECATED_ID:
      return isSetDEPRECATED_id();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GeocodeServingFeature)
      return this.equals((GeocodeServingFeature)that);
    return false;
  }

  public boolean equals(GeocodeServingFeature that) {
    if (that == null)
      return false;

    boolean this_present_longId = true;
    boolean that_present_longId = true;
    if (this_present_longId || that_present_longId) {
      if (!(this_present_longId && that_present_longId))
        return false;
      if (this.longId != that.longId)
        return false;
    }

    boolean this_present_scoringFeatures = true && this.isSetScoringFeatures();
    boolean that_present_scoringFeatures = true && that.isSetScoringFeatures();
    if (this_present_scoringFeatures || that_present_scoringFeatures) {
      if (!(this_present_scoringFeatures && that_present_scoringFeatures))
        return false;
      if (!this.scoringFeatures.equals(that.scoringFeatures))
        return false;
    }

    boolean this_present_feature = true && this.isSetFeature();
    boolean that_present_feature = true && that.isSetFeature();
    if (this_present_feature || that_present_feature) {
      if (!(this_present_feature && that_present_feature))
        return false;
      if (!this.feature.equals(that.feature))
        return false;
    }

    boolean this_present_parents = true && this.isSetParents();
    boolean that_present_parents = true && that.isSetParents();
    if (this_present_parents || that_present_parents) {
      if (!(this_present_parents && that_present_parents))
        return false;
      if (!this.parents.equals(that.parents))
        return false;
    }

    boolean this_present_DEPRECATED_id = true && this.isSetDEPRECATED_id();
    boolean that_present_DEPRECATED_id = true && that.isSetDEPRECATED_id();
    if (this_present_DEPRECATED_id || that_present_DEPRECATED_id) {
      if (!(this_present_DEPRECATED_id && that_present_DEPRECATED_id))
        return false;
      if (!this.DEPRECATED_id.equals(that.DEPRECATED_id))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(GeocodeServingFeature other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    GeocodeServingFeature typedOther = (GeocodeServingFeature)other;

    lastComparison = Boolean.valueOf(isSetLongId()).compareTo(typedOther.isSetLongId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongId()) {
      lastComparison = TBaseHelper.compareTo(this.longId, typedOther.longId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScoringFeatures()).compareTo(typedOther.isSetScoringFeatures());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScoringFeatures()) {
      lastComparison = TBaseHelper.compareTo(this.scoringFeatures, typedOther.scoringFeatures);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeature()).compareTo(typedOther.isSetFeature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeature()) {
      lastComparison = TBaseHelper.compareTo(this.feature, typedOther.feature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParents()).compareTo(typedOther.isSetParents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParents()) {
      lastComparison = TBaseHelper.compareTo(this.parents, typedOther.parents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDEPRECATED_id()).compareTo(typedOther.isSetDEPRECATED_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDEPRECATED_id()) {
      lastComparison = TBaseHelper.compareTo(this.DEPRECATED_id, typedOther.DEPRECATED_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 5: // LONG_ID
          if (field.type == TType.I64) {
            this.longId = iprot.readI64();
            setLongIdIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SCORING_FEATURES
          if (field.type == TType.STRUCT) {
            this.scoringFeatures = new ScoringFeatures();
            this.scoringFeatures.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // FEATURE
          if (field.type == TType.STRUCT) {
            this.feature = new GeocodeFeature();
            this.feature.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // PARENTS
          if (field.type == TType.LIST) {
            {
              TList _list28 = iprot.readListBegin();
              this.parents = new ArrayList<GeocodeFeature>(_list28.size);
              for (int _i29 = 0; _i29 < _list28.size; ++_i29)
              {
                GeocodeFeature _elem30;
                _elem30 = new GeocodeFeature();
                _elem30.read(iprot);
                this.parents.add(_elem30);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 1: // DEPRECATED_ID
          if (field.type == TType.STRING) {
            this.DEPRECATED_id = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.DEPRECATED_id != null) {
      oprot.writeFieldBegin(DEPRECATED_ID_FIELD_DESC);
      oprot.writeString(this.DEPRECATED_id);
      oprot.writeFieldEnd();
    }
    if (this.scoringFeatures != null) {
      oprot.writeFieldBegin(SCORING_FEATURES_FIELD_DESC);
      this.scoringFeatures.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.feature != null) {
      oprot.writeFieldBegin(FEATURE_FIELD_DESC);
      this.feature.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.parents != null) {
      if (isSetParents()) {
        oprot.writeFieldBegin(PARENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.parents.size()));
          for (GeocodeFeature _iter31 : this.parents)
          {
            _iter31.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldBegin(LONG_ID_FIELD_DESC);
    oprot.writeI64(this.longId);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GeocodeServingFeature(");
    boolean first = true;

    sb.append("longId:");
    sb.append(this.longId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("scoringFeatures:");
    if (this.scoringFeatures == null) {
      sb.append("null");
    } else {
      sb.append(this.scoringFeatures);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("feature:");
    if (this.feature == null) {
      sb.append("null");
    } else {
      sb.append(this.feature);
    }
    first = false;
    if (isSetParents()) {
      if (!first) sb.append(", ");
      sb.append("parents:");
      if (this.parents == null) {
        sb.append("null");
      } else {
        sb.append(this.parents);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("DEPRECATED_id:");
    if (this.DEPRECATED_id == null) {
      sb.append("null");
    } else {
      sb.append(this.DEPRECATED_id);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

