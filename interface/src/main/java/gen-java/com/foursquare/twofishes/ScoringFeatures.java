/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.foursquare.twofishes;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ScoringFeatures implements org.apache.thrift.TBase<ScoringFeatures, ScoringFeatures._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ScoringFeatures");

  private static final org.apache.thrift.protocol.TField POPULATION_FIELD_DESC = new org.apache.thrift.protocol.TField("population", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField BOOST_FIELD_DESC = new org.apache.thrift.protocol.TField("boost", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PARENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("parents", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField CAN_GEOCODE_FIELD_DESC = new org.apache.thrift.protocol.TField("canGeocode", org.apache.thrift.protocol.TType.BOOL, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ScoringFeaturesStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ScoringFeaturesTupleSchemeFactory());
  }

  public int population; // optional
  public int boost; // optional
  public List<String> parents; // optional
  public boolean canGeocode; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    POPULATION((short)1, "population"),
    BOOST((short)2, "boost"),
    PARENTS((short)3, "parents"),
    CAN_GEOCODE((short)5, "canGeocode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // POPULATION
          return POPULATION;
        case 2: // BOOST
          return BOOST;
        case 3: // PARENTS
          return PARENTS;
        case 5: // CAN_GEOCODE
          return CAN_GEOCODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __POPULATION_ISSET_ID = 0;
  private static final int __BOOST_ISSET_ID = 1;
  private static final int __CANGEOCODE_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);
  private _Fields optionals[] = {_Fields.POPULATION,_Fields.BOOST,_Fields.PARENTS,_Fields.CAN_GEOCODE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.POPULATION, new org.apache.thrift.meta_data.FieldMetaData("population", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BOOST, new org.apache.thrift.meta_data.FieldMetaData("boost", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARENTS, new org.apache.thrift.meta_data.FieldMetaData("parents", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CAN_GEOCODE, new org.apache.thrift.meta_data.FieldMetaData("canGeocode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ScoringFeatures.class, metaDataMap);
  }

  public ScoringFeatures() {
    this.population = 0;

    this.boost = 0;

    this.parents = new ArrayList<String>();

    this.canGeocode = true;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ScoringFeatures(ScoringFeatures other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.population = other.population;
    this.boost = other.boost;
    if (other.isSetParents()) {
      List<String> __this__parents = new ArrayList<String>();
      for (String other_element : other.parents) {
        __this__parents.add(other_element);
      }
      this.parents = __this__parents;
    }
    this.canGeocode = other.canGeocode;
  }

  public ScoringFeatures deepCopy() {
    return new ScoringFeatures(this);
  }

  @Override
  public void clear() {
    this.population = 0;

    this.boost = 0;

    this.parents = new ArrayList<String>();

    this.canGeocode = true;

  }

  public int getPopulation() {
    return this.population;
  }

  public ScoringFeatures setPopulation(int population) {
    this.population = population;
    setPopulationIsSet(true);
    return this;
  }

  public void unsetPopulation() {
    __isset_bit_vector.clear(__POPULATION_ISSET_ID);
  }

  /** Returns true if field population is set (has been assigned a value) and false otherwise */
  public boolean isSetPopulation() {
    return __isset_bit_vector.get(__POPULATION_ISSET_ID);
  }

  public void setPopulationIsSet(boolean value) {
    __isset_bit_vector.set(__POPULATION_ISSET_ID, value);
  }

  public int getBoost() {
    return this.boost;
  }

  public ScoringFeatures setBoost(int boost) {
    this.boost = boost;
    setBoostIsSet(true);
    return this;
  }

  public void unsetBoost() {
    __isset_bit_vector.clear(__BOOST_ISSET_ID);
  }

  /** Returns true if field boost is set (has been assigned a value) and false otherwise */
  public boolean isSetBoost() {
    return __isset_bit_vector.get(__BOOST_ISSET_ID);
  }

  public void setBoostIsSet(boolean value) {
    __isset_bit_vector.set(__BOOST_ISSET_ID, value);
  }

  public int getParentsSize() {
    return (this.parents == null) ? 0 : this.parents.size();
  }

  public java.util.Iterator<String> getParentsIterator() {
    return (this.parents == null) ? null : this.parents.iterator();
  }

  public void addToParents(String elem) {
    if (this.parents == null) {
      this.parents = new ArrayList<String>();
    }
    this.parents.add(elem);
  }

  public List<String> getParents() {
    return this.parents;
  }

  public ScoringFeatures setParents(List<String> parents) {
    this.parents = parents;
    return this;
  }

  public void unsetParents() {
    this.parents = null;
  }

  /** Returns true if field parents is set (has been assigned a value) and false otherwise */
  public boolean isSetParents() {
    return this.parents != null;
  }

  public void setParentsIsSet(boolean value) {
    if (!value) {
      this.parents = null;
    }
  }

  public boolean isCanGeocode() {
    return this.canGeocode;
  }

  public ScoringFeatures setCanGeocode(boolean canGeocode) {
    this.canGeocode = canGeocode;
    setCanGeocodeIsSet(true);
    return this;
  }

  public void unsetCanGeocode() {
    __isset_bit_vector.clear(__CANGEOCODE_ISSET_ID);
  }

  /** Returns true if field canGeocode is set (has been assigned a value) and false otherwise */
  public boolean isSetCanGeocode() {
    return __isset_bit_vector.get(__CANGEOCODE_ISSET_ID);
  }

  public void setCanGeocodeIsSet(boolean value) {
    __isset_bit_vector.set(__CANGEOCODE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case POPULATION:
      if (value == null) {
        unsetPopulation();
      } else {
        setPopulation((Integer)value);
      }
      break;

    case BOOST:
      if (value == null) {
        unsetBoost();
      } else {
        setBoost((Integer)value);
      }
      break;

    case PARENTS:
      if (value == null) {
        unsetParents();
      } else {
        setParents((List<String>)value);
      }
      break;

    case CAN_GEOCODE:
      if (value == null) {
        unsetCanGeocode();
      } else {
        setCanGeocode((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case POPULATION:
      return Integer.valueOf(getPopulation());

    case BOOST:
      return Integer.valueOf(getBoost());

    case PARENTS:
      return getParents();

    case CAN_GEOCODE:
      return Boolean.valueOf(isCanGeocode());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case POPULATION:
      return isSetPopulation();
    case BOOST:
      return isSetBoost();
    case PARENTS:
      return isSetParents();
    case CAN_GEOCODE:
      return isSetCanGeocode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ScoringFeatures)
      return this.equals((ScoringFeatures)that);
    return false;
  }

  public boolean equals(ScoringFeatures that) {
    if (that == null)
      return false;

    boolean this_present_population = true && this.isSetPopulation();
    boolean that_present_population = true && that.isSetPopulation();
    if (this_present_population || that_present_population) {
      if (!(this_present_population && that_present_population))
        return false;
      if (this.population != that.population)
        return false;
    }

    boolean this_present_boost = true && this.isSetBoost();
    boolean that_present_boost = true && that.isSetBoost();
    if (this_present_boost || that_present_boost) {
      if (!(this_present_boost && that_present_boost))
        return false;
      if (this.boost != that.boost)
        return false;
    }

    boolean this_present_parents = true && this.isSetParents();
    boolean that_present_parents = true && that.isSetParents();
    if (this_present_parents || that_present_parents) {
      if (!(this_present_parents && that_present_parents))
        return false;
      if (!this.parents.equals(that.parents))
        return false;
    }

    boolean this_present_canGeocode = true && this.isSetCanGeocode();
    boolean that_present_canGeocode = true && that.isSetCanGeocode();
    if (this_present_canGeocode || that_present_canGeocode) {
      if (!(this_present_canGeocode && that_present_canGeocode))
        return false;
      if (this.canGeocode != that.canGeocode)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ScoringFeatures other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ScoringFeatures typedOther = (ScoringFeatures)other;

    lastComparison = Boolean.valueOf(isSetPopulation()).compareTo(typedOther.isSetPopulation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPopulation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.population, typedOther.population);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBoost()).compareTo(typedOther.isSetBoost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boost, typedOther.boost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParents()).compareTo(typedOther.isSetParents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parents, typedOther.parents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCanGeocode()).compareTo(typedOther.isSetCanGeocode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCanGeocode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.canGeocode, typedOther.canGeocode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ScoringFeatures(");
    boolean first = true;

    if (isSetPopulation()) {
      sb.append("population:");
      sb.append(this.population);
      first = false;
    }
    if (isSetBoost()) {
      if (!first) sb.append(", ");
      sb.append("boost:");
      sb.append(this.boost);
      first = false;
    }
    if (isSetParents()) {
      if (!first) sb.append(", ");
      sb.append("parents:");
      if (this.parents == null) {
        sb.append("null");
      } else {
        sb.append(this.parents);
      }
      first = false;
    }
    if (isSetCanGeocode()) {
      if (!first) sb.append(", ");
      sb.append("canGeocode:");
      sb.append(this.canGeocode);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ScoringFeaturesStandardSchemeFactory implements SchemeFactory {
    public ScoringFeaturesStandardScheme getScheme() {
      return new ScoringFeaturesStandardScheme();
    }
  }

  private static class ScoringFeaturesStandardScheme extends StandardScheme<ScoringFeatures> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ScoringFeatures struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // POPULATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.population = iprot.readI32();
              struct.setPopulationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BOOST
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.boost = iprot.readI32();
              struct.setBoostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.parents = new ArrayList<String>(_list16.size);
                for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                {
                  String _elem18; // required
                  _elem18 = iprot.readString();
                  struct.parents.add(_elem18);
                }
                iprot.readListEnd();
              }
              struct.setParentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CAN_GEOCODE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.canGeocode = iprot.readBool();
              struct.setCanGeocodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ScoringFeatures struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetPopulation()) {
        oprot.writeFieldBegin(POPULATION_FIELD_DESC);
        oprot.writeI32(struct.population);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBoost()) {
        oprot.writeFieldBegin(BOOST_FIELD_DESC);
        oprot.writeI32(struct.boost);
        oprot.writeFieldEnd();
      }
      if (struct.parents != null) {
        if (struct.isSetParents()) {
          oprot.writeFieldBegin(PARENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.parents.size()));
            for (String _iter19 : struct.parents)
            {
              oprot.writeString(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCanGeocode()) {
        oprot.writeFieldBegin(CAN_GEOCODE_FIELD_DESC);
        oprot.writeBool(struct.canGeocode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ScoringFeaturesTupleSchemeFactory implements SchemeFactory {
    public ScoringFeaturesTupleScheme getScheme() {
      return new ScoringFeaturesTupleScheme();
    }
  }

  private static class ScoringFeaturesTupleScheme extends TupleScheme<ScoringFeatures> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ScoringFeatures struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPopulation()) {
        optionals.set(0);
      }
      if (struct.isSetBoost()) {
        optionals.set(1);
      }
      if (struct.isSetParents()) {
        optionals.set(2);
      }
      if (struct.isSetCanGeocode()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetPopulation()) {
        oprot.writeI32(struct.population);
      }
      if (struct.isSetBoost()) {
        oprot.writeI32(struct.boost);
      }
      if (struct.isSetParents()) {
        {
          oprot.writeI32(struct.parents.size());
          for (String _iter20 : struct.parents)
          {
            oprot.writeString(_iter20);
          }
        }
      }
      if (struct.isSetCanGeocode()) {
        oprot.writeBool(struct.canGeocode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ScoringFeatures struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.population = iprot.readI32();
        struct.setPopulationIsSet(true);
      }
      if (incoming.get(1)) {
        struct.boost = iprot.readI32();
        struct.setBoostIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.parents = new ArrayList<String>(_list21.size);
          for (int _i22 = 0; _i22 < _list21.size; ++_i22)
          {
            String _elem23; // required
            _elem23 = iprot.readString();
            struct.parents.add(_elem23);
          }
        }
        struct.setParentsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.canGeocode = iprot.readBool();
        struct.setCanGeocodeIsSet(true);
      }
    }
  }

}

