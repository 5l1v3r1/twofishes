/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.foursquare.twofishes;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class ScoringFeatures implements TBase<ScoringFeatures, ScoringFeatures._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("ScoringFeatures");

  private static final TField POPULATION_FIELD_DESC = new TField("population", TType.I32, (short)1);
  private static final TField BOOST_FIELD_DESC = new TField("boost", TType.I32, (short)2);
  private static final TField PARENT_IDS_FIELD_DESC = new TField("parentIds", TType.LIST, (short)6);
  private static final TField CAN_GEOCODE_FIELD_DESC = new TField("canGeocode", TType.BOOL, (short)5);
  private static final TField HAS_POLY_FIELD_DESC = new TField("hasPoly", TType.BOOL, (short)7);
  private static final TField DEPRECATED_PARENTS_FIELD_DESC = new TField("DEPRECATED_parents", TType.LIST, (short)3);

  public int population;
  public int boost;
  public List<Long> parentIds;
  public boolean canGeocode;
  public boolean hasPoly;
  public List<String> DEPRECATED_parents;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    POPULATION((short)1, "population"),
    BOOST((short)2, "boost"),
    PARENT_IDS((short)6, "parentIds"),
    CAN_GEOCODE((short)5, "canGeocode"),
    HAS_POLY((short)7, "hasPoly"),
    DEPRECATED_PARENTS((short)3, "DEPRECATED_parents");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // POPULATION
          return POPULATION;
        case 2: // BOOST
          return BOOST;
        case 6: // PARENT_IDS
          return PARENT_IDS;
        case 5: // CAN_GEOCODE
          return CAN_GEOCODE;
        case 7: // HAS_POLY
          return HAS_POLY;
        case 3: // DEPRECATED_PARENTS
          return DEPRECATED_PARENTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __POPULATION_ISSET_ID = 0;
  private static final int __BOOST_ISSET_ID = 1;
  private static final int __CANGEOCODE_ISSET_ID = 2;
  private static final int __HASPOLY_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.POPULATION, new FieldMetaData("population", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.BOOST, new FieldMetaData("boost", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.PARENT_IDS, new FieldMetaData("parentIds", TFieldRequirementType.OPTIONAL, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.I64))));
    tmpMap.put(_Fields.CAN_GEOCODE, new FieldMetaData("canGeocode", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMap.put(_Fields.HAS_POLY, new FieldMetaData("hasPoly", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMap.put(_Fields.DEPRECATED_PARENTS, new FieldMetaData("DEPRECATED_parents", TFieldRequirementType.OPTIONAL, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(ScoringFeatures.class, metaDataMap);
  }

  public ScoringFeatures() {
    this.population = 0;

    this.boost = 0;

    this.parentIds = new ArrayList<Long>();

    this.canGeocode = true;

    this.hasPoly = false;

    this.DEPRECATED_parents = new ArrayList<String>();

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ScoringFeatures(ScoringFeatures other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.population = other.population;
    this.boost = other.boost;
    if (other.isSetParentIds()) {
      List<Long> __this__parentIds = new ArrayList<Long>();
      for (Long other_element : other.parentIds) {
        __this__parentIds.add(other_element);
      }
      this.parentIds = __this__parentIds;
    }
    this.canGeocode = other.canGeocode;
    this.hasPoly = other.hasPoly;
    if (other.isSetDEPRECATED_parents()) {
      List<String> __this__DEPRECATED_parents = new ArrayList<String>();
      for (String other_element : other.DEPRECATED_parents) {
        __this__DEPRECATED_parents.add(other_element);
      }
      this.DEPRECATED_parents = __this__DEPRECATED_parents;
    }
  }

  public ScoringFeatures deepCopy() {
    return new ScoringFeatures(this);
  }

  @Override
  public void clear() {
    this.population = 0;

    this.boost = 0;

    this.parentIds = new ArrayList<Long>();

    this.canGeocode = true;

    this.hasPoly = false;

    this.DEPRECATED_parents = new ArrayList<String>();

  }

  public int getPopulation() {
    return this.population;
  }

  public ScoringFeatures setPopulation(int population) {
    this.population = population;
    setPopulationIsSet(true);
    return this;
  }

  public void unsetPopulation() {
    __isset_bit_vector.clear(__POPULATION_ISSET_ID);
  }

  /** Returns true if field population is set (has been asigned a value) and false otherwise */
  public boolean isSetPopulation() {
    return __isset_bit_vector.get(__POPULATION_ISSET_ID);
  }

  public void setPopulationIsSet(boolean value) {
    __isset_bit_vector.set(__POPULATION_ISSET_ID, value);
  }

  public int getBoost() {
    return this.boost;
  }

  public ScoringFeatures setBoost(int boost) {
    this.boost = boost;
    setBoostIsSet(true);
    return this;
  }

  public void unsetBoost() {
    __isset_bit_vector.clear(__BOOST_ISSET_ID);
  }

  /** Returns true if field boost is set (has been asigned a value) and false otherwise */
  public boolean isSetBoost() {
    return __isset_bit_vector.get(__BOOST_ISSET_ID);
  }

  public void setBoostIsSet(boolean value) {
    __isset_bit_vector.set(__BOOST_ISSET_ID, value);
  }

  public int getParentIdsSize() {
    return (this.parentIds == null) ? 0 : this.parentIds.size();
  }

  public java.util.Iterator<Long> getParentIdsIterator() {
    return (this.parentIds == null) ? null : this.parentIds.iterator();
  }

  public void addToParentIds(long elem) {
    if (this.parentIds == null) {
      this.parentIds = new ArrayList<Long>();
    }
    this.parentIds.add(elem);
  }

  public List<Long> getParentIds() {
    return this.parentIds;
  }

  public ScoringFeatures setParentIds(List<Long> parentIds) {
    this.parentIds = parentIds;
    return this;
  }

  public void unsetParentIds() {
    this.parentIds = null;
  }

  /** Returns true if field parentIds is set (has been asigned a value) and false otherwise */
  public boolean isSetParentIds() {
    return this.parentIds != null;
  }

  public void setParentIdsIsSet(boolean value) {
    if (!value) {
      this.parentIds = null;
    }
  }

  public boolean isCanGeocode() {
    return this.canGeocode;
  }

  public ScoringFeatures setCanGeocode(boolean canGeocode) {
    this.canGeocode = canGeocode;
    setCanGeocodeIsSet(true);
    return this;
  }

  public void unsetCanGeocode() {
    __isset_bit_vector.clear(__CANGEOCODE_ISSET_ID);
  }

  /** Returns true if field canGeocode is set (has been asigned a value) and false otherwise */
  public boolean isSetCanGeocode() {
    return __isset_bit_vector.get(__CANGEOCODE_ISSET_ID);
  }

  public void setCanGeocodeIsSet(boolean value) {
    __isset_bit_vector.set(__CANGEOCODE_ISSET_ID, value);
  }

  public boolean isHasPoly() {
    return this.hasPoly;
  }

  public ScoringFeatures setHasPoly(boolean hasPoly) {
    this.hasPoly = hasPoly;
    setHasPolyIsSet(true);
    return this;
  }

  public void unsetHasPoly() {
    __isset_bit_vector.clear(__HASPOLY_ISSET_ID);
  }

  /** Returns true if field hasPoly is set (has been asigned a value) and false otherwise */
  public boolean isSetHasPoly() {
    return __isset_bit_vector.get(__HASPOLY_ISSET_ID);
  }

  public void setHasPolyIsSet(boolean value) {
    __isset_bit_vector.set(__HASPOLY_ISSET_ID, value);
  }

  public int getDEPRECATED_parentsSize() {
    return (this.DEPRECATED_parents == null) ? 0 : this.DEPRECATED_parents.size();
  }

  public java.util.Iterator<String> getDEPRECATED_parentsIterator() {
    return (this.DEPRECATED_parents == null) ? null : this.DEPRECATED_parents.iterator();
  }

  public void addToDEPRECATED_parents(String elem) {
    if (this.DEPRECATED_parents == null) {
      this.DEPRECATED_parents = new ArrayList<String>();
    }
    this.DEPRECATED_parents.add(elem);
  }

  public List<String> getDEPRECATED_parents() {
    return this.DEPRECATED_parents;
  }

  public ScoringFeatures setDEPRECATED_parents(List<String> DEPRECATED_parents) {
    this.DEPRECATED_parents = DEPRECATED_parents;
    return this;
  }

  public void unsetDEPRECATED_parents() {
    this.DEPRECATED_parents = null;
  }

  /** Returns true if field DEPRECATED_parents is set (has been asigned a value) and false otherwise */
  public boolean isSetDEPRECATED_parents() {
    return this.DEPRECATED_parents != null;
  }

  public void setDEPRECATED_parentsIsSet(boolean value) {
    if (!value) {
      this.DEPRECATED_parents = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case POPULATION:
      if (value == null) {
        unsetPopulation();
      } else {
        setPopulation((Integer)value);
      }
      break;

    case BOOST:
      if (value == null) {
        unsetBoost();
      } else {
        setBoost((Integer)value);
      }
      break;

    case PARENT_IDS:
      if (value == null) {
        unsetParentIds();
      } else {
        setParentIds((List<Long>)value);
      }
      break;

    case CAN_GEOCODE:
      if (value == null) {
        unsetCanGeocode();
      } else {
        setCanGeocode((Boolean)value);
      }
      break;

    case HAS_POLY:
      if (value == null) {
        unsetHasPoly();
      } else {
        setHasPoly((Boolean)value);
      }
      break;

    case DEPRECATED_PARENTS:
      if (value == null) {
        unsetDEPRECATED_parents();
      } else {
        setDEPRECATED_parents((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case POPULATION:
      return new Integer(getPopulation());

    case BOOST:
      return new Integer(getBoost());

    case PARENT_IDS:
      return getParentIds();

    case CAN_GEOCODE:
      return new Boolean(isCanGeocode());

    case HAS_POLY:
      return new Boolean(isHasPoly());

    case DEPRECATED_PARENTS:
      return getDEPRECATED_parents();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case POPULATION:
      return isSetPopulation();
    case BOOST:
      return isSetBoost();
    case PARENT_IDS:
      return isSetParentIds();
    case CAN_GEOCODE:
      return isSetCanGeocode();
    case HAS_POLY:
      return isSetHasPoly();
    case DEPRECATED_PARENTS:
      return isSetDEPRECATED_parents();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ScoringFeatures)
      return this.equals((ScoringFeatures)that);
    return false;
  }

  public boolean equals(ScoringFeatures that) {
    if (that == null)
      return false;

    boolean this_present_population = true && this.isSetPopulation();
    boolean that_present_population = true && that.isSetPopulation();
    if (this_present_population || that_present_population) {
      if (!(this_present_population && that_present_population))
        return false;
      if (this.population != that.population)
        return false;
    }

    boolean this_present_boost = true && this.isSetBoost();
    boolean that_present_boost = true && that.isSetBoost();
    if (this_present_boost || that_present_boost) {
      if (!(this_present_boost && that_present_boost))
        return false;
      if (this.boost != that.boost)
        return false;
    }

    boolean this_present_parentIds = true && this.isSetParentIds();
    boolean that_present_parentIds = true && that.isSetParentIds();
    if (this_present_parentIds || that_present_parentIds) {
      if (!(this_present_parentIds && that_present_parentIds))
        return false;
      if (!this.parentIds.equals(that.parentIds))
        return false;
    }

    boolean this_present_canGeocode = true && this.isSetCanGeocode();
    boolean that_present_canGeocode = true && that.isSetCanGeocode();
    if (this_present_canGeocode || that_present_canGeocode) {
      if (!(this_present_canGeocode && that_present_canGeocode))
        return false;
      if (this.canGeocode != that.canGeocode)
        return false;
    }

    boolean this_present_hasPoly = true && this.isSetHasPoly();
    boolean that_present_hasPoly = true && that.isSetHasPoly();
    if (this_present_hasPoly || that_present_hasPoly) {
      if (!(this_present_hasPoly && that_present_hasPoly))
        return false;
      if (this.hasPoly != that.hasPoly)
        return false;
    }

    boolean this_present_DEPRECATED_parents = true && this.isSetDEPRECATED_parents();
    boolean that_present_DEPRECATED_parents = true && that.isSetDEPRECATED_parents();
    if (this_present_DEPRECATED_parents || that_present_DEPRECATED_parents) {
      if (!(this_present_DEPRECATED_parents && that_present_DEPRECATED_parents))
        return false;
      if (!this.DEPRECATED_parents.equals(that.DEPRECATED_parents))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ScoringFeatures other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ScoringFeatures typedOther = (ScoringFeatures)other;

    lastComparison = Boolean.valueOf(isSetPopulation()).compareTo(typedOther.isSetPopulation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPopulation()) {
      lastComparison = TBaseHelper.compareTo(this.population, typedOther.population);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBoost()).compareTo(typedOther.isSetBoost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoost()) {
      lastComparison = TBaseHelper.compareTo(this.boost, typedOther.boost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentIds()).compareTo(typedOther.isSetParentIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentIds()) {
      lastComparison = TBaseHelper.compareTo(this.parentIds, typedOther.parentIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCanGeocode()).compareTo(typedOther.isSetCanGeocode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCanGeocode()) {
      lastComparison = TBaseHelper.compareTo(this.canGeocode, typedOther.canGeocode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasPoly()).compareTo(typedOther.isSetHasPoly());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasPoly()) {
      lastComparison = TBaseHelper.compareTo(this.hasPoly, typedOther.hasPoly);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDEPRECATED_parents()).compareTo(typedOther.isSetDEPRECATED_parents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDEPRECATED_parents()) {
      lastComparison = TBaseHelper.compareTo(this.DEPRECATED_parents, typedOther.DEPRECATED_parents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // POPULATION
          if (field.type == TType.I32) {
            this.population = iprot.readI32();
            setPopulationIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // BOOST
          if (field.type == TType.I32) {
            this.boost = iprot.readI32();
            setBoostIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // PARENT_IDS
          if (field.type == TType.LIST) {
            {
              TList _list4 = iprot.readListBegin();
              this.parentIds = new ArrayList<Long>(_list4.size);
              for (int _i5 = 0; _i5 < _list4.size; ++_i5)
              {
                long _elem6;
                _elem6 = iprot.readI64();
                this.parentIds.add(_elem6);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // CAN_GEOCODE
          if (field.type == TType.BOOL) {
            this.canGeocode = iprot.readBool();
            setCanGeocodeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // HAS_POLY
          if (field.type == TType.BOOL) {
            this.hasPoly = iprot.readBool();
            setHasPolyIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // DEPRECATED_PARENTS
          if (field.type == TType.LIST) {
            {
              TList _list7 = iprot.readListBegin();
              this.DEPRECATED_parents = new ArrayList<String>(_list7.size);
              for (int _i8 = 0; _i8 < _list7.size; ++_i8)
              {
                String _elem9;
                _elem9 = iprot.readString();
                this.DEPRECATED_parents.add(_elem9);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (isSetPopulation()) {
      oprot.writeFieldBegin(POPULATION_FIELD_DESC);
      oprot.writeI32(this.population);
      oprot.writeFieldEnd();
    }
    if (isSetBoost()) {
      oprot.writeFieldBegin(BOOST_FIELD_DESC);
      oprot.writeI32(this.boost);
      oprot.writeFieldEnd();
    }
    if (this.DEPRECATED_parents != null) {
      if (isSetDEPRECATED_parents()) {
        oprot.writeFieldBegin(DEPRECATED_PARENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.DEPRECATED_parents.size()));
          for (String _iter10 : this.DEPRECATED_parents)
          {
            oprot.writeString(_iter10);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (isSetCanGeocode()) {
      oprot.writeFieldBegin(CAN_GEOCODE_FIELD_DESC);
      oprot.writeBool(this.canGeocode);
      oprot.writeFieldEnd();
    }
    if (this.parentIds != null) {
      if (isSetParentIds()) {
        oprot.writeFieldBegin(PARENT_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.I64, this.parentIds.size()));
          for (long _iter11 : this.parentIds)
          {
            oprot.writeI64(_iter11);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (isSetHasPoly()) {
      oprot.writeFieldBegin(HAS_POLY_FIELD_DESC);
      oprot.writeBool(this.hasPoly);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ScoringFeatures(");
    boolean first = true;

    if (isSetPopulation()) {
      sb.append("population:");
      sb.append(this.population);
      first = false;
    }
    if (isSetBoost()) {
      if (!first) sb.append(", ");
      sb.append("boost:");
      sb.append(this.boost);
      first = false;
    }
    if (isSetParentIds()) {
      if (!first) sb.append(", ");
      sb.append("parentIds:");
      if (this.parentIds == null) {
        sb.append("null");
      } else {
        sb.append(this.parentIds);
      }
      first = false;
    }
    if (isSetCanGeocode()) {
      if (!first) sb.append(", ");
      sb.append("canGeocode:");
      sb.append(this.canGeocode);
      first = false;
    }
    if (isSetHasPoly()) {
      if (!first) sb.append(", ");
      sb.append("hasPoly:");
      sb.append(this.hasPoly);
      first = false;
    }
    if (isSetDEPRECATED_parents()) {
      if (!first) sb.append(", ");
      sb.append("DEPRECATED_parents:");
      if (this.DEPRECATED_parents == null) {
        sb.append("null");
      } else {
        sb.append(this.DEPRECATED_parents);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

