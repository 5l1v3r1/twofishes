/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.foursquare.twofishes;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class InterpretationDebugInfo implements TBase<InterpretationDebugInfo, InterpretationDebugInfo._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("InterpretationDebugInfo");

  private static final TField SCORE_COMPONENTS_FIELD_DESC = new TField("scoreComponents", TType.LIST, (short)1);
  private static final TField FINAL_SCORE_FIELD_DESC = new TField("finalScore", TType.I32, (short)2);

  public List<DebugScoreComponent> scoreComponents;
  public int finalScore;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SCORE_COMPONENTS((short)1, "scoreComponents"),
    FINAL_SCORE((short)2, "finalScore");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SCORE_COMPONENTS
          return SCORE_COMPONENTS;
        case 2: // FINAL_SCORE
          return FINAL_SCORE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FINALSCORE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SCORE_COMPONENTS, new FieldMetaData("scoreComponents", TFieldRequirementType.OPTIONAL, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, DebugScoreComponent.class))));
    tmpMap.put(_Fields.FINAL_SCORE, new FieldMetaData("finalScore", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(InterpretationDebugInfo.class, metaDataMap);
  }

  public InterpretationDebugInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public InterpretationDebugInfo(InterpretationDebugInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetScoreComponents()) {
      List<DebugScoreComponent> __this__scoreComponents = new ArrayList<DebugScoreComponent>();
      for (DebugScoreComponent other_element : other.scoreComponents) {
        __this__scoreComponents.add(new DebugScoreComponent(other_element));
      }
      this.scoreComponents = __this__scoreComponents;
    }
    this.finalScore = other.finalScore;
  }

  public InterpretationDebugInfo deepCopy() {
    return new InterpretationDebugInfo(this);
  }

  @Override
  public void clear() {
    this.scoreComponents = null;
    setFinalScoreIsSet(false);
    this.finalScore = 0;
  }

  public int getScoreComponentsSize() {
    return (this.scoreComponents == null) ? 0 : this.scoreComponents.size();
  }

  public java.util.Iterator<DebugScoreComponent> getScoreComponentsIterator() {
    return (this.scoreComponents == null) ? null : this.scoreComponents.iterator();
  }

  public void addToScoreComponents(DebugScoreComponent elem) {
    if (this.scoreComponents == null) {
      this.scoreComponents = new ArrayList<DebugScoreComponent>();
    }
    this.scoreComponents.add(elem);
  }

  public List<DebugScoreComponent> getScoreComponents() {
    return this.scoreComponents;
  }

  public InterpretationDebugInfo setScoreComponents(List<DebugScoreComponent> scoreComponents) {
    this.scoreComponents = scoreComponents;
    return this;
  }

  public void unsetScoreComponents() {
    this.scoreComponents = null;
  }

  /** Returns true if field scoreComponents is set (has been asigned a value) and false otherwise */
  public boolean isSetScoreComponents() {
    return this.scoreComponents != null;
  }

  public void setScoreComponentsIsSet(boolean value) {
    if (!value) {
      this.scoreComponents = null;
    }
  }

  public int getFinalScore() {
    return this.finalScore;
  }

  public InterpretationDebugInfo setFinalScore(int finalScore) {
    this.finalScore = finalScore;
    setFinalScoreIsSet(true);
    return this;
  }

  public void unsetFinalScore() {
    __isset_bit_vector.clear(__FINALSCORE_ISSET_ID);
  }

  /** Returns true if field finalScore is set (has been asigned a value) and false otherwise */
  public boolean isSetFinalScore() {
    return __isset_bit_vector.get(__FINALSCORE_ISSET_ID);
  }

  public void setFinalScoreIsSet(boolean value) {
    __isset_bit_vector.set(__FINALSCORE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SCORE_COMPONENTS:
      if (value == null) {
        unsetScoreComponents();
      } else {
        setScoreComponents((List<DebugScoreComponent>)value);
      }
      break;

    case FINAL_SCORE:
      if (value == null) {
        unsetFinalScore();
      } else {
        setFinalScore((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SCORE_COMPONENTS:
      return getScoreComponents();

    case FINAL_SCORE:
      return new Integer(getFinalScore());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SCORE_COMPONENTS:
      return isSetScoreComponents();
    case FINAL_SCORE:
      return isSetFinalScore();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof InterpretationDebugInfo)
      return this.equals((InterpretationDebugInfo)that);
    return false;
  }

  public boolean equals(InterpretationDebugInfo that) {
    if (that == null)
      return false;

    boolean this_present_scoreComponents = true && this.isSetScoreComponents();
    boolean that_present_scoreComponents = true && that.isSetScoreComponents();
    if (this_present_scoreComponents || that_present_scoreComponents) {
      if (!(this_present_scoreComponents && that_present_scoreComponents))
        return false;
      if (!this.scoreComponents.equals(that.scoreComponents))
        return false;
    }

    boolean this_present_finalScore = true && this.isSetFinalScore();
    boolean that_present_finalScore = true && that.isSetFinalScore();
    if (this_present_finalScore || that_present_finalScore) {
      if (!(this_present_finalScore && that_present_finalScore))
        return false;
      if (this.finalScore != that.finalScore)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(InterpretationDebugInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    InterpretationDebugInfo typedOther = (InterpretationDebugInfo)other;

    lastComparison = Boolean.valueOf(isSetScoreComponents()).compareTo(typedOther.isSetScoreComponents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScoreComponents()) {
      lastComparison = TBaseHelper.compareTo(this.scoreComponents, typedOther.scoreComponents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinalScore()).compareTo(typedOther.isSetFinalScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinalScore()) {
      lastComparison = TBaseHelper.compareTo(this.finalScore, typedOther.finalScore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // SCORE_COMPONENTS
          if (field.type == TType.LIST) {
            {
              TList _list28 = iprot.readListBegin();
              this.scoreComponents = new ArrayList<DebugScoreComponent>(_list28.size);
              for (int _i29 = 0; _i29 < _list28.size; ++_i29)
              {
                DebugScoreComponent _elem30;
                _elem30 = new DebugScoreComponent();
                _elem30.read(iprot);
                this.scoreComponents.add(_elem30);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // FINAL_SCORE
          if (field.type == TType.I32) {
            this.finalScore = iprot.readI32();
            setFinalScoreIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.scoreComponents != null) {
      if (isSetScoreComponents()) {
        oprot.writeFieldBegin(SCORE_COMPONENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.scoreComponents.size()));
          for (DebugScoreComponent _iter31 : this.scoreComponents)
          {
            _iter31.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (isSetFinalScore()) {
      oprot.writeFieldBegin(FINAL_SCORE_FIELD_DESC);
      oprot.writeI32(this.finalScore);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("InterpretationDebugInfo(");
    boolean first = true;

    if (isSetScoreComponents()) {
      sb.append("scoreComponents:");
      if (this.scoreComponents == null) {
        sb.append("null");
      } else {
        sb.append(this.scoreComponents);
      }
      first = false;
    }
    if (isSetFinalScore()) {
      if (!first) sb.append(", ");
      sb.append("finalScore:");
      sb.append(this.finalScore);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

