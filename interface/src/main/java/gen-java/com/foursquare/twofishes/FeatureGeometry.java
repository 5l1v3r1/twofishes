/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.foursquare.twofishes;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FeatureGeometry implements org.apache.thrift.TBase<FeatureGeometry, FeatureGeometry._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FeatureGeometry");

  private static final org.apache.thrift.protocol.TField CENTER_FIELD_DESC = new org.apache.thrift.protocol.TField("center", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField BOUNDS_FIELD_DESC = new org.apache.thrift.protocol.TField("bounds", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField WKB_GEOMETRY_FIELD_DESC = new org.apache.thrift.protocol.TField("wkbGeometry", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField WKT_GEOMETRY_FIELD_DESC = new org.apache.thrift.protocol.TField("wktGeometry", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FeatureGeometryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FeatureGeometryTupleSchemeFactory());
  }

  public GeocodePoint center; // required
  public GeocodeBoundingBox bounds; // optional
  public ByteBuffer wkbGeometry; // optional
  public String wktGeometry; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CENTER((short)1, "center"),
    BOUNDS((short)2, "bounds"),
    WKB_GEOMETRY((short)3, "wkbGeometry"),
    WKT_GEOMETRY((short)4, "wktGeometry");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CENTER
          return CENTER;
        case 2: // BOUNDS
          return BOUNDS;
        case 3: // WKB_GEOMETRY
          return WKB_GEOMETRY;
        case 4: // WKT_GEOMETRY
          return WKT_GEOMETRY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.BOUNDS,_Fields.WKB_GEOMETRY,_Fields.WKT_GEOMETRY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CENTER, new org.apache.thrift.meta_data.FieldMetaData("center", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GeocodePoint.class)));
    tmpMap.put(_Fields.BOUNDS, new org.apache.thrift.meta_data.FieldMetaData("bounds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GeocodeBoundingBox.class)));
    tmpMap.put(_Fields.WKB_GEOMETRY, new org.apache.thrift.meta_data.FieldMetaData("wkbGeometry", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.WKT_GEOMETRY, new org.apache.thrift.meta_data.FieldMetaData("wktGeometry", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FeatureGeometry.class, metaDataMap);
  }

  public FeatureGeometry() {
  }

  public FeatureGeometry(
    GeocodePoint center)
  {
    this();
    this.center = center;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FeatureGeometry(FeatureGeometry other) {
    if (other.isSetCenter()) {
      this.center = new GeocodePoint(other.center);
    }
    if (other.isSetBounds()) {
      this.bounds = new GeocodeBoundingBox(other.bounds);
    }
    if (other.isSetWkbGeometry()) {
      this.wkbGeometry = org.apache.thrift.TBaseHelper.copyBinary(other.wkbGeometry);
;
    }
    if (other.isSetWktGeometry()) {
      this.wktGeometry = other.wktGeometry;
    }
  }

  public FeatureGeometry deepCopy() {
    return new FeatureGeometry(this);
  }

  @Override
  public void clear() {
    this.center = null;
    this.bounds = null;
    this.wkbGeometry = null;
    this.wktGeometry = null;
  }

  public GeocodePoint getCenter() {
    return this.center;
  }

  public FeatureGeometry setCenter(GeocodePoint center) {
    this.center = center;
    return this;
  }

  public void unsetCenter() {
    this.center = null;
  }

  /** Returns true if field center is set (has been assigned a value) and false otherwise */
  public boolean isSetCenter() {
    return this.center != null;
  }

  public void setCenterIsSet(boolean value) {
    if (!value) {
      this.center = null;
    }
  }

  public GeocodeBoundingBox getBounds() {
    return this.bounds;
  }

  public FeatureGeometry setBounds(GeocodeBoundingBox bounds) {
    this.bounds = bounds;
    return this;
  }

  public void unsetBounds() {
    this.bounds = null;
  }

  /** Returns true if field bounds is set (has been assigned a value) and false otherwise */
  public boolean isSetBounds() {
    return this.bounds != null;
  }

  public void setBoundsIsSet(boolean value) {
    if (!value) {
      this.bounds = null;
    }
  }

  public byte[] getWkbGeometry() {
    setWkbGeometry(org.apache.thrift.TBaseHelper.rightSize(wkbGeometry));
    return wkbGeometry == null ? null : wkbGeometry.array();
  }

  public ByteBuffer bufferForWkbGeometry() {
    return wkbGeometry;
  }

  public FeatureGeometry setWkbGeometry(byte[] wkbGeometry) {
    setWkbGeometry(wkbGeometry == null ? (ByteBuffer)null : ByteBuffer.wrap(wkbGeometry));
    return this;
  }

  public FeatureGeometry setWkbGeometry(ByteBuffer wkbGeometry) {
    this.wkbGeometry = wkbGeometry;
    return this;
  }

  public void unsetWkbGeometry() {
    this.wkbGeometry = null;
  }

  /** Returns true if field wkbGeometry is set (has been assigned a value) and false otherwise */
  public boolean isSetWkbGeometry() {
    return this.wkbGeometry != null;
  }

  public void setWkbGeometryIsSet(boolean value) {
    if (!value) {
      this.wkbGeometry = null;
    }
  }

  public String getWktGeometry() {
    return this.wktGeometry;
  }

  public FeatureGeometry setWktGeometry(String wktGeometry) {
    this.wktGeometry = wktGeometry;
    return this;
  }

  public void unsetWktGeometry() {
    this.wktGeometry = null;
  }

  /** Returns true if field wktGeometry is set (has been assigned a value) and false otherwise */
  public boolean isSetWktGeometry() {
    return this.wktGeometry != null;
  }

  public void setWktGeometryIsSet(boolean value) {
    if (!value) {
      this.wktGeometry = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CENTER:
      if (value == null) {
        unsetCenter();
      } else {
        setCenter((GeocodePoint)value);
      }
      break;

    case BOUNDS:
      if (value == null) {
        unsetBounds();
      } else {
        setBounds((GeocodeBoundingBox)value);
      }
      break;

    case WKB_GEOMETRY:
      if (value == null) {
        unsetWkbGeometry();
      } else {
        setWkbGeometry((ByteBuffer)value);
      }
      break;

    case WKT_GEOMETRY:
      if (value == null) {
        unsetWktGeometry();
      } else {
        setWktGeometry((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CENTER:
      return getCenter();

    case BOUNDS:
      return getBounds();

    case WKB_GEOMETRY:
      return getWkbGeometry();

    case WKT_GEOMETRY:
      return getWktGeometry();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CENTER:
      return isSetCenter();
    case BOUNDS:
      return isSetBounds();
    case WKB_GEOMETRY:
      return isSetWkbGeometry();
    case WKT_GEOMETRY:
      return isSetWktGeometry();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FeatureGeometry)
      return this.equals((FeatureGeometry)that);
    return false;
  }

  public boolean equals(FeatureGeometry that) {
    if (that == null)
      return false;

    boolean this_present_center = true && this.isSetCenter();
    boolean that_present_center = true && that.isSetCenter();
    if (this_present_center || that_present_center) {
      if (!(this_present_center && that_present_center))
        return false;
      if (!this.center.equals(that.center))
        return false;
    }

    boolean this_present_bounds = true && this.isSetBounds();
    boolean that_present_bounds = true && that.isSetBounds();
    if (this_present_bounds || that_present_bounds) {
      if (!(this_present_bounds && that_present_bounds))
        return false;
      if (!this.bounds.equals(that.bounds))
        return false;
    }

    boolean this_present_wkbGeometry = true && this.isSetWkbGeometry();
    boolean that_present_wkbGeometry = true && that.isSetWkbGeometry();
    if (this_present_wkbGeometry || that_present_wkbGeometry) {
      if (!(this_present_wkbGeometry && that_present_wkbGeometry))
        return false;
      if (!this.wkbGeometry.equals(that.wkbGeometry))
        return false;
    }

    boolean this_present_wktGeometry = true && this.isSetWktGeometry();
    boolean that_present_wktGeometry = true && that.isSetWktGeometry();
    if (this_present_wktGeometry || that_present_wktGeometry) {
      if (!(this_present_wktGeometry && that_present_wktGeometry))
        return false;
      if (!this.wktGeometry.equals(that.wktGeometry))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(FeatureGeometry other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FeatureGeometry typedOther = (FeatureGeometry)other;

    lastComparison = Boolean.valueOf(isSetCenter()).compareTo(typedOther.isSetCenter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCenter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.center, typedOther.center);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBounds()).compareTo(typedOther.isSetBounds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBounds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bounds, typedOther.bounds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWkbGeometry()).compareTo(typedOther.isSetWkbGeometry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWkbGeometry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wkbGeometry, typedOther.wkbGeometry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWktGeometry()).compareTo(typedOther.isSetWktGeometry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWktGeometry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wktGeometry, typedOther.wktGeometry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FeatureGeometry(");
    boolean first = true;

    sb.append("center:");
    if (this.center == null) {
      sb.append("null");
    } else {
      sb.append(this.center);
    }
    first = false;
    if (isSetBounds()) {
      if (!first) sb.append(", ");
      sb.append("bounds:");
      if (this.bounds == null) {
        sb.append("null");
      } else {
        sb.append(this.bounds);
      }
      first = false;
    }
    if (isSetWkbGeometry()) {
      if (!first) sb.append(", ");
      sb.append("wkbGeometry:");
      if (this.wkbGeometry == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.wkbGeometry, sb);
      }
      first = false;
    }
    if (isSetWktGeometry()) {
      if (!first) sb.append(", ");
      sb.append("wktGeometry:");
      if (this.wktGeometry == null) {
        sb.append("null");
      } else {
        sb.append(this.wktGeometry);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FeatureGeometryStandardSchemeFactory implements SchemeFactory {
    public FeatureGeometryStandardScheme getScheme() {
      return new FeatureGeometryStandardScheme();
    }
  }

  private static class FeatureGeometryStandardScheme extends StandardScheme<FeatureGeometry> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FeatureGeometry struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CENTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.center = new GeocodePoint();
              struct.center.read(iprot);
              struct.setCenterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BOUNDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.bounds = new GeocodeBoundingBox();
              struct.bounds.read(iprot);
              struct.setBoundsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WKB_GEOMETRY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wkbGeometry = iprot.readBinary();
              struct.setWkbGeometryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // WKT_GEOMETRY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wktGeometry = iprot.readString();
              struct.setWktGeometryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FeatureGeometry struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.center != null) {
        oprot.writeFieldBegin(CENTER_FIELD_DESC);
        struct.center.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.bounds != null) {
        if (struct.isSetBounds()) {
          oprot.writeFieldBegin(BOUNDS_FIELD_DESC);
          struct.bounds.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.wkbGeometry != null) {
        if (struct.isSetWkbGeometry()) {
          oprot.writeFieldBegin(WKB_GEOMETRY_FIELD_DESC);
          oprot.writeBinary(struct.wkbGeometry);
          oprot.writeFieldEnd();
        }
      }
      if (struct.wktGeometry != null) {
        if (struct.isSetWktGeometry()) {
          oprot.writeFieldBegin(WKT_GEOMETRY_FIELD_DESC);
          oprot.writeString(struct.wktGeometry);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FeatureGeometryTupleSchemeFactory implements SchemeFactory {
    public FeatureGeometryTupleScheme getScheme() {
      return new FeatureGeometryTupleScheme();
    }
  }

  private static class FeatureGeometryTupleScheme extends TupleScheme<FeatureGeometry> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FeatureGeometry struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCenter()) {
        optionals.set(0);
      }
      if (struct.isSetBounds()) {
        optionals.set(1);
      }
      if (struct.isSetWkbGeometry()) {
        optionals.set(2);
      }
      if (struct.isSetWktGeometry()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetCenter()) {
        struct.center.write(oprot);
      }
      if (struct.isSetBounds()) {
        struct.bounds.write(oprot);
      }
      if (struct.isSetWkbGeometry()) {
        oprot.writeBinary(struct.wkbGeometry);
      }
      if (struct.isSetWktGeometry()) {
        oprot.writeString(struct.wktGeometry);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FeatureGeometry struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.center = new GeocodePoint();
        struct.center.read(iprot);
        struct.setCenterIsSet(true);
      }
      if (incoming.get(1)) {
        struct.bounds = new GeocodeBoundingBox();
        struct.bounds.read(iprot);
        struct.setBoundsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.wkbGeometry = iprot.readBinary();
        struct.setWkbGeometryIsSet(true);
      }
      if (incoming.get(3)) {
        struct.wktGeometry = iprot.readString();
        struct.setWktGeometryIsSet(true);
      }
    }
  }

}

