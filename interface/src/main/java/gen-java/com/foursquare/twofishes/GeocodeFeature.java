/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.foursquare.twofishes;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class GeocodeFeature implements org.apache.thrift.TBase<GeocodeFeature, GeocodeFeature._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GeocodeFeature");

  private static final org.apache.thrift.protocol.TField CC_FIELD_DESC = new org.apache.thrift.protocol.TField("cc", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField GEOMETRY_FIELD_DESC = new org.apache.thrift.protocol.TField("geometry", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DISPLAY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("displayName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField WOE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("woeType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("names", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField ATTRIBUTION_FIELD_DESC = new org.apache.thrift.protocol.TField("attribution", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField TIMEZONES_FIELD_DESC = new org.apache.thrift.protocol.TField("timezones", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField HIGHLIGHTED_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("highlightedName", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField MATCHED_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("matchedName", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField SLUG_FIELD_DESC = new org.apache.thrift.protocol.TField("slug", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GeocodeFeatureStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GeocodeFeatureTupleSchemeFactory());
  }

  public String cc; // required
  public FeatureGeometry geometry; // required
  public String name; // optional
  public String displayName; // optional
  /**
   * 
   * @see YahooWoeType
   */
  public YahooWoeType woeType; // optional
  public List<FeatureId> ids; // optional
  public List<FeatureName> names; // optional
  public List<String> attribution; // optional
  public List<String> timezones; // optional
  public String highlightedName; // optional
  public String matchedName; // optional
  public String slug; // optional
  public String id; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CC((short)1, "cc"),
    GEOMETRY((short)2, "geometry"),
    NAME((short)3, "name"),
    DISPLAY_NAME((short)4, "displayName"),
    /**
     * 
     * @see YahooWoeType
     */
    WOE_TYPE((short)5, "woeType"),
    IDS((short)6, "ids"),
    NAMES((short)7, "names"),
    ATTRIBUTION((short)8, "attribution"),
    TIMEZONES((short)9, "timezones"),
    HIGHLIGHTED_NAME((short)11, "highlightedName"),
    MATCHED_NAME((short)12, "matchedName"),
    SLUG((short)13, "slug"),
    ID((short)14, "id");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CC
          return CC;
        case 2: // GEOMETRY
          return GEOMETRY;
        case 3: // NAME
          return NAME;
        case 4: // DISPLAY_NAME
          return DISPLAY_NAME;
        case 5: // WOE_TYPE
          return WOE_TYPE;
        case 6: // IDS
          return IDS;
        case 7: // NAMES
          return NAMES;
        case 8: // ATTRIBUTION
          return ATTRIBUTION;
        case 9: // TIMEZONES
          return TIMEZONES;
        case 11: // HIGHLIGHTED_NAME
          return HIGHLIGHTED_NAME;
        case 12: // MATCHED_NAME
          return MATCHED_NAME;
        case 13: // SLUG
          return SLUG;
        case 14: // ID
          return ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.NAME,_Fields.DISPLAY_NAME,_Fields.WOE_TYPE,_Fields.IDS,_Fields.NAMES,_Fields.ATTRIBUTION,_Fields.TIMEZONES,_Fields.HIGHLIGHTED_NAME,_Fields.MATCHED_NAME,_Fields.SLUG,_Fields.ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CC, new org.apache.thrift.meta_data.FieldMetaData("cc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GEOMETRY, new org.apache.thrift.meta_data.FieldMetaData("geometry", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FeatureGeometry.class)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISPLAY_NAME, new org.apache.thrift.meta_data.FieldMetaData("displayName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WOE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("woeType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, YahooWoeType.class)));
    tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FeatureId.class))));
    tmpMap.put(_Fields.NAMES, new org.apache.thrift.meta_data.FieldMetaData("names", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FeatureName.class))));
    tmpMap.put(_Fields.ATTRIBUTION, new org.apache.thrift.meta_data.FieldMetaData("attribution", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TIMEZONES, new org.apache.thrift.meta_data.FieldMetaData("timezones", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.HIGHLIGHTED_NAME, new org.apache.thrift.meta_data.FieldMetaData("highlightedName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MATCHED_NAME, new org.apache.thrift.meta_data.FieldMetaData("matchedName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SLUG, new org.apache.thrift.meta_data.FieldMetaData("slug", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GeocodeFeature.class, metaDataMap);
  }

  public GeocodeFeature() {
  }

  public GeocodeFeature(
    String cc,
    FeatureGeometry geometry)
  {
    this();
    this.cc = cc;
    this.geometry = geometry;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GeocodeFeature(GeocodeFeature other) {
    if (other.isSetCc()) {
      this.cc = other.cc;
    }
    if (other.isSetGeometry()) {
      this.geometry = new FeatureGeometry(other.geometry);
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetDisplayName()) {
      this.displayName = other.displayName;
    }
    if (other.isSetWoeType()) {
      this.woeType = other.woeType;
    }
    if (other.isSetIds()) {
      List<FeatureId> __this__ids = new ArrayList<FeatureId>();
      for (FeatureId other_element : other.ids) {
        __this__ids.add(new FeatureId(other_element));
      }
      this.ids = __this__ids;
    }
    if (other.isSetNames()) {
      List<FeatureName> __this__names = new ArrayList<FeatureName>();
      for (FeatureName other_element : other.names) {
        __this__names.add(new FeatureName(other_element));
      }
      this.names = __this__names;
    }
    if (other.isSetAttribution()) {
      List<String> __this__attribution = new ArrayList<String>();
      for (String other_element : other.attribution) {
        __this__attribution.add(other_element);
      }
      this.attribution = __this__attribution;
    }
    if (other.isSetTimezones()) {
      List<String> __this__timezones = new ArrayList<String>();
      for (String other_element : other.timezones) {
        __this__timezones.add(other_element);
      }
      this.timezones = __this__timezones;
    }
    if (other.isSetHighlightedName()) {
      this.highlightedName = other.highlightedName;
    }
    if (other.isSetMatchedName()) {
      this.matchedName = other.matchedName;
    }
    if (other.isSetSlug()) {
      this.slug = other.slug;
    }
    if (other.isSetId()) {
      this.id = other.id;
    }
  }

  public GeocodeFeature deepCopy() {
    return new GeocodeFeature(this);
  }

  @Override
  public void clear() {
    this.cc = null;
    this.geometry = null;
    this.name = null;
    this.displayName = null;
    this.woeType = null;
    this.ids = null;
    this.names = null;
    this.attribution = null;
    this.timezones = null;
    this.highlightedName = null;
    this.matchedName = null;
    this.slug = null;
    this.id = null;
  }

  public String getCc() {
    return this.cc;
  }

  public GeocodeFeature setCc(String cc) {
    this.cc = cc;
    return this;
  }

  public void unsetCc() {
    this.cc = null;
  }

  /** Returns true if field cc is set (has been assigned a value) and false otherwise */
  public boolean isSetCc() {
    return this.cc != null;
  }

  public void setCcIsSet(boolean value) {
    if (!value) {
      this.cc = null;
    }
  }

  public FeatureGeometry getGeometry() {
    return this.geometry;
  }

  public GeocodeFeature setGeometry(FeatureGeometry geometry) {
    this.geometry = geometry;
    return this;
  }

  public void unsetGeometry() {
    this.geometry = null;
  }

  /** Returns true if field geometry is set (has been assigned a value) and false otherwise */
  public boolean isSetGeometry() {
    return this.geometry != null;
  }

  public void setGeometryIsSet(boolean value) {
    if (!value) {
      this.geometry = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public GeocodeFeature setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getDisplayName() {
    return this.displayName;
  }

  public GeocodeFeature setDisplayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  public void unsetDisplayName() {
    this.displayName = null;
  }

  /** Returns true if field displayName is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplayName() {
    return this.displayName != null;
  }

  public void setDisplayNameIsSet(boolean value) {
    if (!value) {
      this.displayName = null;
    }
  }

  /**
   * 
   * @see YahooWoeType
   */
  public YahooWoeType getWoeType() {
    return this.woeType;
  }

  /**
   * 
   * @see YahooWoeType
   */
  public GeocodeFeature setWoeType(YahooWoeType woeType) {
    this.woeType = woeType;
    return this;
  }

  public void unsetWoeType() {
    this.woeType = null;
  }

  /** Returns true if field woeType is set (has been assigned a value) and false otherwise */
  public boolean isSetWoeType() {
    return this.woeType != null;
  }

  public void setWoeTypeIsSet(boolean value) {
    if (!value) {
      this.woeType = null;
    }
  }

  public int getIdsSize() {
    return (this.ids == null) ? 0 : this.ids.size();
  }

  public java.util.Iterator<FeatureId> getIdsIterator() {
    return (this.ids == null) ? null : this.ids.iterator();
  }

  public void addToIds(FeatureId elem) {
    if (this.ids == null) {
      this.ids = new ArrayList<FeatureId>();
    }
    this.ids.add(elem);
  }

  public List<FeatureId> getIds() {
    return this.ids;
  }

  public GeocodeFeature setIds(List<FeatureId> ids) {
    this.ids = ids;
    return this;
  }

  public void unsetIds() {
    this.ids = null;
  }

  /** Returns true if field ids is set (has been assigned a value) and false otherwise */
  public boolean isSetIds() {
    return this.ids != null;
  }

  public void setIdsIsSet(boolean value) {
    if (!value) {
      this.ids = null;
    }
  }

  public int getNamesSize() {
    return (this.names == null) ? 0 : this.names.size();
  }

  public java.util.Iterator<FeatureName> getNamesIterator() {
    return (this.names == null) ? null : this.names.iterator();
  }

  public void addToNames(FeatureName elem) {
    if (this.names == null) {
      this.names = new ArrayList<FeatureName>();
    }
    this.names.add(elem);
  }

  public List<FeatureName> getNames() {
    return this.names;
  }

  public GeocodeFeature setNames(List<FeatureName> names) {
    this.names = names;
    return this;
  }

  public void unsetNames() {
    this.names = null;
  }

  /** Returns true if field names is set (has been assigned a value) and false otherwise */
  public boolean isSetNames() {
    return this.names != null;
  }

  public void setNamesIsSet(boolean value) {
    if (!value) {
      this.names = null;
    }
  }

  public int getAttributionSize() {
    return (this.attribution == null) ? 0 : this.attribution.size();
  }

  public java.util.Iterator<String> getAttributionIterator() {
    return (this.attribution == null) ? null : this.attribution.iterator();
  }

  public void addToAttribution(String elem) {
    if (this.attribution == null) {
      this.attribution = new ArrayList<String>();
    }
    this.attribution.add(elem);
  }

  public List<String> getAttribution() {
    return this.attribution;
  }

  public GeocodeFeature setAttribution(List<String> attribution) {
    this.attribution = attribution;
    return this;
  }

  public void unsetAttribution() {
    this.attribution = null;
  }

  /** Returns true if field attribution is set (has been assigned a value) and false otherwise */
  public boolean isSetAttribution() {
    return this.attribution != null;
  }

  public void setAttributionIsSet(boolean value) {
    if (!value) {
      this.attribution = null;
    }
  }

  public int getTimezonesSize() {
    return (this.timezones == null) ? 0 : this.timezones.size();
  }

  public java.util.Iterator<String> getTimezonesIterator() {
    return (this.timezones == null) ? null : this.timezones.iterator();
  }

  public void addToTimezones(String elem) {
    if (this.timezones == null) {
      this.timezones = new ArrayList<String>();
    }
    this.timezones.add(elem);
  }

  public List<String> getTimezones() {
    return this.timezones;
  }

  public GeocodeFeature setTimezones(List<String> timezones) {
    this.timezones = timezones;
    return this;
  }

  public void unsetTimezones() {
    this.timezones = null;
  }

  /** Returns true if field timezones is set (has been assigned a value) and false otherwise */
  public boolean isSetTimezones() {
    return this.timezones != null;
  }

  public void setTimezonesIsSet(boolean value) {
    if (!value) {
      this.timezones = null;
    }
  }

  public String getHighlightedName() {
    return this.highlightedName;
  }

  public GeocodeFeature setHighlightedName(String highlightedName) {
    this.highlightedName = highlightedName;
    return this;
  }

  public void unsetHighlightedName() {
    this.highlightedName = null;
  }

  /** Returns true if field highlightedName is set (has been assigned a value) and false otherwise */
  public boolean isSetHighlightedName() {
    return this.highlightedName != null;
  }

  public void setHighlightedNameIsSet(boolean value) {
    if (!value) {
      this.highlightedName = null;
    }
  }

  public String getMatchedName() {
    return this.matchedName;
  }

  public GeocodeFeature setMatchedName(String matchedName) {
    this.matchedName = matchedName;
    return this;
  }

  public void unsetMatchedName() {
    this.matchedName = null;
  }

  /** Returns true if field matchedName is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchedName() {
    return this.matchedName != null;
  }

  public void setMatchedNameIsSet(boolean value) {
    if (!value) {
      this.matchedName = null;
    }
  }

  public String getSlug() {
    return this.slug;
  }

  public GeocodeFeature setSlug(String slug) {
    this.slug = slug;
    return this;
  }

  public void unsetSlug() {
    this.slug = null;
  }

  /** Returns true if field slug is set (has been assigned a value) and false otherwise */
  public boolean isSetSlug() {
    return this.slug != null;
  }

  public void setSlugIsSet(boolean value) {
    if (!value) {
      this.slug = null;
    }
  }

  public String getId() {
    return this.id;
  }

  public GeocodeFeature setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CC:
      if (value == null) {
        unsetCc();
      } else {
        setCc((String)value);
      }
      break;

    case GEOMETRY:
      if (value == null) {
        unsetGeometry();
      } else {
        setGeometry((FeatureGeometry)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case DISPLAY_NAME:
      if (value == null) {
        unsetDisplayName();
      } else {
        setDisplayName((String)value);
      }
      break;

    case WOE_TYPE:
      if (value == null) {
        unsetWoeType();
      } else {
        setWoeType((YahooWoeType)value);
      }
      break;

    case IDS:
      if (value == null) {
        unsetIds();
      } else {
        setIds((List<FeatureId>)value);
      }
      break;

    case NAMES:
      if (value == null) {
        unsetNames();
      } else {
        setNames((List<FeatureName>)value);
      }
      break;

    case ATTRIBUTION:
      if (value == null) {
        unsetAttribution();
      } else {
        setAttribution((List<String>)value);
      }
      break;

    case TIMEZONES:
      if (value == null) {
        unsetTimezones();
      } else {
        setTimezones((List<String>)value);
      }
      break;

    case HIGHLIGHTED_NAME:
      if (value == null) {
        unsetHighlightedName();
      } else {
        setHighlightedName((String)value);
      }
      break;

    case MATCHED_NAME:
      if (value == null) {
        unsetMatchedName();
      } else {
        setMatchedName((String)value);
      }
      break;

    case SLUG:
      if (value == null) {
        unsetSlug();
      } else {
        setSlug((String)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CC:
      return getCc();

    case GEOMETRY:
      return getGeometry();

    case NAME:
      return getName();

    case DISPLAY_NAME:
      return getDisplayName();

    case WOE_TYPE:
      return getWoeType();

    case IDS:
      return getIds();

    case NAMES:
      return getNames();

    case ATTRIBUTION:
      return getAttribution();

    case TIMEZONES:
      return getTimezones();

    case HIGHLIGHTED_NAME:
      return getHighlightedName();

    case MATCHED_NAME:
      return getMatchedName();

    case SLUG:
      return getSlug();

    case ID:
      return getId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CC:
      return isSetCc();
    case GEOMETRY:
      return isSetGeometry();
    case NAME:
      return isSetName();
    case DISPLAY_NAME:
      return isSetDisplayName();
    case WOE_TYPE:
      return isSetWoeType();
    case IDS:
      return isSetIds();
    case NAMES:
      return isSetNames();
    case ATTRIBUTION:
      return isSetAttribution();
    case TIMEZONES:
      return isSetTimezones();
    case HIGHLIGHTED_NAME:
      return isSetHighlightedName();
    case MATCHED_NAME:
      return isSetMatchedName();
    case SLUG:
      return isSetSlug();
    case ID:
      return isSetId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GeocodeFeature)
      return this.equals((GeocodeFeature)that);
    return false;
  }

  public boolean equals(GeocodeFeature that) {
    if (that == null)
      return false;

    boolean this_present_cc = true && this.isSetCc();
    boolean that_present_cc = true && that.isSetCc();
    if (this_present_cc || that_present_cc) {
      if (!(this_present_cc && that_present_cc))
        return false;
      if (!this.cc.equals(that.cc))
        return false;
    }

    boolean this_present_geometry = true && this.isSetGeometry();
    boolean that_present_geometry = true && that.isSetGeometry();
    if (this_present_geometry || that_present_geometry) {
      if (!(this_present_geometry && that_present_geometry))
        return false;
      if (!this.geometry.equals(that.geometry))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_displayName = true && this.isSetDisplayName();
    boolean that_present_displayName = true && that.isSetDisplayName();
    if (this_present_displayName || that_present_displayName) {
      if (!(this_present_displayName && that_present_displayName))
        return false;
      if (!this.displayName.equals(that.displayName))
        return false;
    }

    boolean this_present_woeType = true && this.isSetWoeType();
    boolean that_present_woeType = true && that.isSetWoeType();
    if (this_present_woeType || that_present_woeType) {
      if (!(this_present_woeType && that_present_woeType))
        return false;
      if (!this.woeType.equals(that.woeType))
        return false;
    }

    boolean this_present_ids = true && this.isSetIds();
    boolean that_present_ids = true && that.isSetIds();
    if (this_present_ids || that_present_ids) {
      if (!(this_present_ids && that_present_ids))
        return false;
      if (!this.ids.equals(that.ids))
        return false;
    }

    boolean this_present_names = true && this.isSetNames();
    boolean that_present_names = true && that.isSetNames();
    if (this_present_names || that_present_names) {
      if (!(this_present_names && that_present_names))
        return false;
      if (!this.names.equals(that.names))
        return false;
    }

    boolean this_present_attribution = true && this.isSetAttribution();
    boolean that_present_attribution = true && that.isSetAttribution();
    if (this_present_attribution || that_present_attribution) {
      if (!(this_present_attribution && that_present_attribution))
        return false;
      if (!this.attribution.equals(that.attribution))
        return false;
    }

    boolean this_present_timezones = true && this.isSetTimezones();
    boolean that_present_timezones = true && that.isSetTimezones();
    if (this_present_timezones || that_present_timezones) {
      if (!(this_present_timezones && that_present_timezones))
        return false;
      if (!this.timezones.equals(that.timezones))
        return false;
    }

    boolean this_present_highlightedName = true && this.isSetHighlightedName();
    boolean that_present_highlightedName = true && that.isSetHighlightedName();
    if (this_present_highlightedName || that_present_highlightedName) {
      if (!(this_present_highlightedName && that_present_highlightedName))
        return false;
      if (!this.highlightedName.equals(that.highlightedName))
        return false;
    }

    boolean this_present_matchedName = true && this.isSetMatchedName();
    boolean that_present_matchedName = true && that.isSetMatchedName();
    if (this_present_matchedName || that_present_matchedName) {
      if (!(this_present_matchedName && that_present_matchedName))
        return false;
      if (!this.matchedName.equals(that.matchedName))
        return false;
    }

    boolean this_present_slug = true && this.isSetSlug();
    boolean that_present_slug = true && that.isSetSlug();
    if (this_present_slug || that_present_slug) {
      if (!(this_present_slug && that_present_slug))
        return false;
      if (!this.slug.equals(that.slug))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(GeocodeFeature other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    GeocodeFeature typedOther = (GeocodeFeature)other;

    lastComparison = Boolean.valueOf(isSetCc()).compareTo(typedOther.isSetCc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cc, typedOther.cc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGeometry()).compareTo(typedOther.isSetGeometry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGeometry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.geometry, typedOther.geometry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisplayName()).compareTo(typedOther.isSetDisplayName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplayName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayName, typedOther.displayName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWoeType()).compareTo(typedOther.isSetWoeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWoeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.woeType, typedOther.woeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIds()).compareTo(typedOther.isSetIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, typedOther.ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNames()).compareTo(typedOther.isSetNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.names, typedOther.names);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttribution()).compareTo(typedOther.isSetAttribution());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttribution()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribution, typedOther.attribution);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimezones()).compareTo(typedOther.isSetTimezones());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimezones()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timezones, typedOther.timezones);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHighlightedName()).compareTo(typedOther.isSetHighlightedName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHighlightedName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.highlightedName, typedOther.highlightedName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchedName()).compareTo(typedOther.isSetMatchedName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchedName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchedName, typedOther.matchedName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSlug()).compareTo(typedOther.isSetSlug());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlug()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slug, typedOther.slug);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GeocodeFeature(");
    boolean first = true;

    sb.append("cc:");
    if (this.cc == null) {
      sb.append("null");
    } else {
      sb.append(this.cc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("geometry:");
    if (this.geometry == null) {
      sb.append("null");
    } else {
      sb.append(this.geometry);
    }
    first = false;
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetDisplayName()) {
      if (!first) sb.append(", ");
      sb.append("displayName:");
      if (this.displayName == null) {
        sb.append("null");
      } else {
        sb.append(this.displayName);
      }
      first = false;
    }
    if (isSetWoeType()) {
      if (!first) sb.append(", ");
      sb.append("woeType:");
      if (this.woeType == null) {
        sb.append("null");
      } else {
        sb.append(this.woeType);
      }
      first = false;
    }
    if (isSetIds()) {
      if (!first) sb.append(", ");
      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
    }
    if (isSetNames()) {
      if (!first) sb.append(", ");
      sb.append("names:");
      if (this.names == null) {
        sb.append("null");
      } else {
        sb.append(this.names);
      }
      first = false;
    }
    if (isSetAttribution()) {
      if (!first) sb.append(", ");
      sb.append("attribution:");
      if (this.attribution == null) {
        sb.append("null");
      } else {
        sb.append(this.attribution);
      }
      first = false;
    }
    if (isSetTimezones()) {
      if (!first) sb.append(", ");
      sb.append("timezones:");
      if (this.timezones == null) {
        sb.append("null");
      } else {
        sb.append(this.timezones);
      }
      first = false;
    }
    if (isSetHighlightedName()) {
      if (!first) sb.append(", ");
      sb.append("highlightedName:");
      if (this.highlightedName == null) {
        sb.append("null");
      } else {
        sb.append(this.highlightedName);
      }
      first = false;
    }
    if (isSetMatchedName()) {
      if (!first) sb.append(", ");
      sb.append("matchedName:");
      if (this.matchedName == null) {
        sb.append("null");
      } else {
        sb.append(this.matchedName);
      }
      first = false;
    }
    if (isSetSlug()) {
      if (!first) sb.append(", ");
      sb.append("slug:");
      if (this.slug == null) {
        sb.append("null");
      } else {
        sb.append(this.slug);
      }
      first = false;
    }
    if (isSetId()) {
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GeocodeFeatureStandardSchemeFactory implements SchemeFactory {
    public GeocodeFeatureStandardScheme getScheme() {
      return new GeocodeFeatureStandardScheme();
    }
  }

  private static class GeocodeFeatureStandardScheme extends StandardScheme<GeocodeFeature> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GeocodeFeature struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cc = iprot.readString();
              struct.setCcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GEOMETRY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.geometry = new FeatureGeometry();
              struct.geometry.read(iprot);
              struct.setGeometryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DISPLAY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.displayName = iprot.readString();
              struct.setDisplayNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // WOE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.woeType = YahooWoeType.findByValue(iprot.readI32());
              struct.setWoeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.ids = new ArrayList<FeatureId>(_list24.size);
                for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                {
                  FeatureId _elem26; // required
                  _elem26 = new FeatureId();
                  _elem26.read(iprot);
                  struct.ids.add(_elem26);
                }
                iprot.readListEnd();
              }
              struct.setIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
                struct.names = new ArrayList<FeatureName>(_list27.size);
                for (int _i28 = 0; _i28 < _list27.size; ++_i28)
                {
                  FeatureName _elem29; // required
                  _elem29 = new FeatureName();
                  _elem29.read(iprot);
                  struct.names.add(_elem29);
                }
                iprot.readListEnd();
              }
              struct.setNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ATTRIBUTION
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list30 = iprot.readListBegin();
                struct.attribution = new ArrayList<String>(_list30.size);
                for (int _i31 = 0; _i31 < _list30.size; ++_i31)
                {
                  String _elem32; // required
                  _elem32 = iprot.readString();
                  struct.attribution.add(_elem32);
                }
                iprot.readListEnd();
              }
              struct.setAttributionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TIMEZONES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list33 = iprot.readListBegin();
                struct.timezones = new ArrayList<String>(_list33.size);
                for (int _i34 = 0; _i34 < _list33.size; ++_i34)
                {
                  String _elem35; // required
                  _elem35 = iprot.readString();
                  struct.timezones.add(_elem35);
                }
                iprot.readListEnd();
              }
              struct.setTimezonesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // HIGHLIGHTED_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.highlightedName = iprot.readString();
              struct.setHighlightedNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MATCHED_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.matchedName = iprot.readString();
              struct.setMatchedNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SLUG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.slug = iprot.readString();
              struct.setSlugIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GeocodeFeature struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.cc != null) {
        oprot.writeFieldBegin(CC_FIELD_DESC);
        oprot.writeString(struct.cc);
        oprot.writeFieldEnd();
      }
      if (struct.geometry != null) {
        oprot.writeFieldBegin(GEOMETRY_FIELD_DESC);
        struct.geometry.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.displayName != null) {
        if (struct.isSetDisplayName()) {
          oprot.writeFieldBegin(DISPLAY_NAME_FIELD_DESC);
          oprot.writeString(struct.displayName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.woeType != null) {
        if (struct.isSetWoeType()) {
          oprot.writeFieldBegin(WOE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.woeType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.ids != null) {
        if (struct.isSetIds()) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.ids.size()));
            for (FeatureId _iter36 : struct.ids)
            {
              _iter36.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.names != null) {
        if (struct.isSetNames()) {
          oprot.writeFieldBegin(NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.names.size()));
            for (FeatureName _iter37 : struct.names)
            {
              _iter37.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.attribution != null) {
        if (struct.isSetAttribution()) {
          oprot.writeFieldBegin(ATTRIBUTION_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.attribution.size()));
            for (String _iter38 : struct.attribution)
            {
              oprot.writeString(_iter38);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.timezones != null) {
        if (struct.isSetTimezones()) {
          oprot.writeFieldBegin(TIMEZONES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.timezones.size()));
            for (String _iter39 : struct.timezones)
            {
              oprot.writeString(_iter39);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.highlightedName != null) {
        if (struct.isSetHighlightedName()) {
          oprot.writeFieldBegin(HIGHLIGHTED_NAME_FIELD_DESC);
          oprot.writeString(struct.highlightedName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.matchedName != null) {
        if (struct.isSetMatchedName()) {
          oprot.writeFieldBegin(MATCHED_NAME_FIELD_DESC);
          oprot.writeString(struct.matchedName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.slug != null) {
        if (struct.isSetSlug()) {
          oprot.writeFieldBegin(SLUG_FIELD_DESC);
          oprot.writeString(struct.slug);
          oprot.writeFieldEnd();
        }
      }
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GeocodeFeatureTupleSchemeFactory implements SchemeFactory {
    public GeocodeFeatureTupleScheme getScheme() {
      return new GeocodeFeatureTupleScheme();
    }
  }

  private static class GeocodeFeatureTupleScheme extends TupleScheme<GeocodeFeature> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GeocodeFeature struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCc()) {
        optionals.set(0);
      }
      if (struct.isSetGeometry()) {
        optionals.set(1);
      }
      if (struct.isSetName()) {
        optionals.set(2);
      }
      if (struct.isSetDisplayName()) {
        optionals.set(3);
      }
      if (struct.isSetWoeType()) {
        optionals.set(4);
      }
      if (struct.isSetIds()) {
        optionals.set(5);
      }
      if (struct.isSetNames()) {
        optionals.set(6);
      }
      if (struct.isSetAttribution()) {
        optionals.set(7);
      }
      if (struct.isSetTimezones()) {
        optionals.set(8);
      }
      if (struct.isSetHighlightedName()) {
        optionals.set(9);
      }
      if (struct.isSetMatchedName()) {
        optionals.set(10);
      }
      if (struct.isSetSlug()) {
        optionals.set(11);
      }
      if (struct.isSetId()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetCc()) {
        oprot.writeString(struct.cc);
      }
      if (struct.isSetGeometry()) {
        struct.geometry.write(oprot);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetDisplayName()) {
        oprot.writeString(struct.displayName);
      }
      if (struct.isSetWoeType()) {
        oprot.writeI32(struct.woeType.getValue());
      }
      if (struct.isSetIds()) {
        {
          oprot.writeI32(struct.ids.size());
          for (FeatureId _iter40 : struct.ids)
          {
            _iter40.write(oprot);
          }
        }
      }
      if (struct.isSetNames()) {
        {
          oprot.writeI32(struct.names.size());
          for (FeatureName _iter41 : struct.names)
          {
            _iter41.write(oprot);
          }
        }
      }
      if (struct.isSetAttribution()) {
        {
          oprot.writeI32(struct.attribution.size());
          for (String _iter42 : struct.attribution)
          {
            oprot.writeString(_iter42);
          }
        }
      }
      if (struct.isSetTimezones()) {
        {
          oprot.writeI32(struct.timezones.size());
          for (String _iter43 : struct.timezones)
          {
            oprot.writeString(_iter43);
          }
        }
      }
      if (struct.isSetHighlightedName()) {
        oprot.writeString(struct.highlightedName);
      }
      if (struct.isSetMatchedName()) {
        oprot.writeString(struct.matchedName);
      }
      if (struct.isSetSlug()) {
        oprot.writeString(struct.slug);
      }
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GeocodeFeature struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.cc = iprot.readString();
        struct.setCcIsSet(true);
      }
      if (incoming.get(1)) {
        struct.geometry = new FeatureGeometry();
        struct.geometry.read(iprot);
        struct.setGeometryIsSet(true);
      }
      if (incoming.get(2)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.displayName = iprot.readString();
        struct.setDisplayNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.woeType = YahooWoeType.findByValue(iprot.readI32());
        struct.setWoeTypeIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list44 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.ids = new ArrayList<FeatureId>(_list44.size);
          for (int _i45 = 0; _i45 < _list44.size; ++_i45)
          {
            FeatureId _elem46; // required
            _elem46 = new FeatureId();
            _elem46.read(iprot);
            struct.ids.add(_elem46);
          }
        }
        struct.setIdsIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.names = new ArrayList<FeatureName>(_list47.size);
          for (int _i48 = 0; _i48 < _list47.size; ++_i48)
          {
            FeatureName _elem49; // required
            _elem49 = new FeatureName();
            _elem49.read(iprot);
            struct.names.add(_elem49);
          }
        }
        struct.setNamesIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list50 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.attribution = new ArrayList<String>(_list50.size);
          for (int _i51 = 0; _i51 < _list50.size; ++_i51)
          {
            String _elem52; // required
            _elem52 = iprot.readString();
            struct.attribution.add(_elem52);
          }
        }
        struct.setAttributionIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.timezones = new ArrayList<String>(_list53.size);
          for (int _i54 = 0; _i54 < _list53.size; ++_i54)
          {
            String _elem55; // required
            _elem55 = iprot.readString();
            struct.timezones.add(_elem55);
          }
        }
        struct.setTimezonesIsSet(true);
      }
      if (incoming.get(9)) {
        struct.highlightedName = iprot.readString();
        struct.setHighlightedNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.matchedName = iprot.readString();
        struct.setMatchedNameIsSet(true);
      }
      if (incoming.get(11)) {
        struct.slug = iprot.readString();
        struct.setSlugIsSet(true);
      }
      if (incoming.get(12)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
    }
  }

}

