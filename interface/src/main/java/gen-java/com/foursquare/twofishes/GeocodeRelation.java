/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.foursquare.twofishes;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class GeocodeRelation implements TBase<GeocodeRelation, GeocodeRelation._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("GeocodeRelation");

  private static final TField RELATION_TYPE_FIELD_DESC = new TField("relationType", TType.I32, (short)1);
  private static final TField RELATED_ID_FIELD_DESC = new TField("relatedId", TType.STRING, (short)2);

  /**
   * 
   * @see GeocodeRelationType
   */
  public GeocodeRelationType relationType;
  public String relatedId;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    /**
     * 
     * @see GeocodeRelationType
     */
    RELATION_TYPE((short)1, "relationType"),
    RELATED_ID((short)2, "relatedId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RELATION_TYPE
          return RELATION_TYPE;
        case 2: // RELATED_ID
          return RELATED_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RELATION_TYPE, new FieldMetaData("relationType", TFieldRequirementType.OPTIONAL, 
        new EnumMetaData(TType.ENUM, GeocodeRelationType.class)));
    tmpMap.put(_Fields.RELATED_ID, new FieldMetaData("relatedId", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(GeocodeRelation.class, metaDataMap);
  }

  public GeocodeRelation() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GeocodeRelation(GeocodeRelation other) {
    if (other.isSetRelationType()) {
      this.relationType = other.relationType;
    }
    if (other.isSetRelatedId()) {
      this.relatedId = other.relatedId;
    }
  }

  public GeocodeRelation deepCopy() {
    return new GeocodeRelation(this);
  }

  @Override
  public void clear() {
    this.relationType = null;
    this.relatedId = null;
  }

  /**
   * 
   * @see GeocodeRelationType
   */
  public GeocodeRelationType getRelationType() {
    return this.relationType;
  }

  /**
   * 
   * @see GeocodeRelationType
   */
  public GeocodeRelation setRelationType(GeocodeRelationType relationType) {
    this.relationType = relationType;
    return this;
  }

  public void unsetRelationType() {
    this.relationType = null;
  }

  /** Returns true if field relationType is set (has been asigned a value) and false otherwise */
  public boolean isSetRelationType() {
    return this.relationType != null;
  }

  public void setRelationTypeIsSet(boolean value) {
    if (!value) {
      this.relationType = null;
    }
  }

  public String getRelatedId() {
    return this.relatedId;
  }

  public GeocodeRelation setRelatedId(String relatedId) {
    this.relatedId = relatedId;
    return this;
  }

  public void unsetRelatedId() {
    this.relatedId = null;
  }

  /** Returns true if field relatedId is set (has been asigned a value) and false otherwise */
  public boolean isSetRelatedId() {
    return this.relatedId != null;
  }

  public void setRelatedIdIsSet(boolean value) {
    if (!value) {
      this.relatedId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RELATION_TYPE:
      if (value == null) {
        unsetRelationType();
      } else {
        setRelationType((GeocodeRelationType)value);
      }
      break;

    case RELATED_ID:
      if (value == null) {
        unsetRelatedId();
      } else {
        setRelatedId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RELATION_TYPE:
      return getRelationType();

    case RELATED_ID:
      return getRelatedId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RELATION_TYPE:
      return isSetRelationType();
    case RELATED_ID:
      return isSetRelatedId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GeocodeRelation)
      return this.equals((GeocodeRelation)that);
    return false;
  }

  public boolean equals(GeocodeRelation that) {
    if (that == null)
      return false;

    boolean this_present_relationType = true && this.isSetRelationType();
    boolean that_present_relationType = true && that.isSetRelationType();
    if (this_present_relationType || that_present_relationType) {
      if (!(this_present_relationType && that_present_relationType))
        return false;
      if (!this.relationType.equals(that.relationType))
        return false;
    }

    boolean this_present_relatedId = true && this.isSetRelatedId();
    boolean that_present_relatedId = true && that.isSetRelatedId();
    if (this_present_relatedId || that_present_relatedId) {
      if (!(this_present_relatedId && that_present_relatedId))
        return false;
      if (!this.relatedId.equals(that.relatedId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(GeocodeRelation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    GeocodeRelation typedOther = (GeocodeRelation)other;

    lastComparison = Boolean.valueOf(isSetRelationType()).compareTo(typedOther.isSetRelationType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelationType()) {
      lastComparison = TBaseHelper.compareTo(this.relationType, typedOther.relationType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelatedId()).compareTo(typedOther.isSetRelatedId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelatedId()) {
      lastComparison = TBaseHelper.compareTo(this.relatedId, typedOther.relatedId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // RELATION_TYPE
          if (field.type == TType.I32) {
            this.relationType = GeocodeRelationType.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // RELATED_ID
          if (field.type == TType.STRING) {
            this.relatedId = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.relationType != null) {
      if (isSetRelationType()) {
        oprot.writeFieldBegin(RELATION_TYPE_FIELD_DESC);
        oprot.writeI32(this.relationType.getValue());
        oprot.writeFieldEnd();
      }
    }
    if (this.relatedId != null) {
      if (isSetRelatedId()) {
        oprot.writeFieldBegin(RELATED_ID_FIELD_DESC);
        oprot.writeString(this.relatedId);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GeocodeRelation(");
    boolean first = true;

    if (isSetRelationType()) {
      sb.append("relationType:");
      if (this.relationType == null) {
        sb.append("null");
      } else {
        sb.append(this.relationType);
      }
      first = false;
    }
    if (isSetRelatedId()) {
      if (!first) sb.append(", ");
      sb.append("relatedId:");
      if (this.relatedId == null) {
        sb.append("null");
      } else {
        sb.append(this.relatedId);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

