/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.foursquare.twofishes;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class GeocodeResponse implements org.apache.thrift.TBase<GeocodeResponse, GeocodeResponse._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GeocodeResponse");

  private static final org.apache.thrift.protocol.TField INTERPRETATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("interpretations", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField DEBUG_LINES_FIELD_DESC = new org.apache.thrift.protocol.TField("debugLines", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GeocodeResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GeocodeResponseTupleSchemeFactory());
  }

  public List<GeocodeInterpretation> interpretations; // required
  public List<String> debugLines; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INTERPRETATIONS((short)1, "interpretations"),
    DEBUG_LINES((short)2, "debugLines");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INTERPRETATIONS
          return INTERPRETATIONS;
        case 2: // DEBUG_LINES
          return DEBUG_LINES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.DEBUG_LINES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INTERPRETATIONS, new org.apache.thrift.meta_data.FieldMetaData("interpretations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GeocodeInterpretation.class))));
    tmpMap.put(_Fields.DEBUG_LINES, new org.apache.thrift.meta_data.FieldMetaData("debugLines", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GeocodeResponse.class, metaDataMap);
  }

  public GeocodeResponse() {
  }

  public GeocodeResponse(
    List<GeocodeInterpretation> interpretations)
  {
    this();
    this.interpretations = interpretations;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GeocodeResponse(GeocodeResponse other) {
    if (other.isSetInterpretations()) {
      List<GeocodeInterpretation> __this__interpretations = new ArrayList<GeocodeInterpretation>();
      for (GeocodeInterpretation other_element : other.interpretations) {
        __this__interpretations.add(new GeocodeInterpretation(other_element));
      }
      this.interpretations = __this__interpretations;
    }
    if (other.isSetDebugLines()) {
      List<String> __this__debugLines = new ArrayList<String>();
      for (String other_element : other.debugLines) {
        __this__debugLines.add(other_element);
      }
      this.debugLines = __this__debugLines;
    }
  }

  public GeocodeResponse deepCopy() {
    return new GeocodeResponse(this);
  }

  @Override
  public void clear() {
    this.interpretations = null;
    this.debugLines = null;
  }

  public int getInterpretationsSize() {
    return (this.interpretations == null) ? 0 : this.interpretations.size();
  }

  public java.util.Iterator<GeocodeInterpretation> getInterpretationsIterator() {
    return (this.interpretations == null) ? null : this.interpretations.iterator();
  }

  public void addToInterpretations(GeocodeInterpretation elem) {
    if (this.interpretations == null) {
      this.interpretations = new ArrayList<GeocodeInterpretation>();
    }
    this.interpretations.add(elem);
  }

  public List<GeocodeInterpretation> getInterpretations() {
    return this.interpretations;
  }

  public GeocodeResponse setInterpretations(List<GeocodeInterpretation> interpretations) {
    this.interpretations = interpretations;
    return this;
  }

  public void unsetInterpretations() {
    this.interpretations = null;
  }

  /** Returns true if field interpretations is set (has been assigned a value) and false otherwise */
  public boolean isSetInterpretations() {
    return this.interpretations != null;
  }

  public void setInterpretationsIsSet(boolean value) {
    if (!value) {
      this.interpretations = null;
    }
  }

  public int getDebugLinesSize() {
    return (this.debugLines == null) ? 0 : this.debugLines.size();
  }

  public java.util.Iterator<String> getDebugLinesIterator() {
    return (this.debugLines == null) ? null : this.debugLines.iterator();
  }

  public void addToDebugLines(String elem) {
    if (this.debugLines == null) {
      this.debugLines = new ArrayList<String>();
    }
    this.debugLines.add(elem);
  }

  public List<String> getDebugLines() {
    return this.debugLines;
  }

  public GeocodeResponse setDebugLines(List<String> debugLines) {
    this.debugLines = debugLines;
    return this;
  }

  public void unsetDebugLines() {
    this.debugLines = null;
  }

  /** Returns true if field debugLines is set (has been assigned a value) and false otherwise */
  public boolean isSetDebugLines() {
    return this.debugLines != null;
  }

  public void setDebugLinesIsSet(boolean value) {
    if (!value) {
      this.debugLines = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INTERPRETATIONS:
      if (value == null) {
        unsetInterpretations();
      } else {
        setInterpretations((List<GeocodeInterpretation>)value);
      }
      break;

    case DEBUG_LINES:
      if (value == null) {
        unsetDebugLines();
      } else {
        setDebugLines((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INTERPRETATIONS:
      return getInterpretations();

    case DEBUG_LINES:
      return getDebugLines();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INTERPRETATIONS:
      return isSetInterpretations();
    case DEBUG_LINES:
      return isSetDebugLines();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GeocodeResponse)
      return this.equals((GeocodeResponse)that);
    return false;
  }

  public boolean equals(GeocodeResponse that) {
    if (that == null)
      return false;

    boolean this_present_interpretations = true && this.isSetInterpretations();
    boolean that_present_interpretations = true && that.isSetInterpretations();
    if (this_present_interpretations || that_present_interpretations) {
      if (!(this_present_interpretations && that_present_interpretations))
        return false;
      if (!this.interpretations.equals(that.interpretations))
        return false;
    }

    boolean this_present_debugLines = true && this.isSetDebugLines();
    boolean that_present_debugLines = true && that.isSetDebugLines();
    if (this_present_debugLines || that_present_debugLines) {
      if (!(this_present_debugLines && that_present_debugLines))
        return false;
      if (!this.debugLines.equals(that.debugLines))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(GeocodeResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    GeocodeResponse typedOther = (GeocodeResponse)other;

    lastComparison = Boolean.valueOf(isSetInterpretations()).compareTo(typedOther.isSetInterpretations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterpretations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interpretations, typedOther.interpretations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDebugLines()).compareTo(typedOther.isSetDebugLines());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebugLines()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debugLines, typedOther.debugLines);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GeocodeResponse(");
    boolean first = true;

    sb.append("interpretations:");
    if (this.interpretations == null) {
      sb.append("null");
    } else {
      sb.append(this.interpretations);
    }
    first = false;
    if (isSetDebugLines()) {
      if (!first) sb.append(", ");
      sb.append("debugLines:");
      if (this.debugLines == null) {
        sb.append("null");
      } else {
        sb.append(this.debugLines);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GeocodeResponseStandardSchemeFactory implements SchemeFactory {
    public GeocodeResponseStandardScheme getScheme() {
      return new GeocodeResponseStandardScheme();
    }
  }

  private static class GeocodeResponseStandardScheme extends StandardScheme<GeocodeResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GeocodeResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INTERPRETATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                struct.interpretations = new ArrayList<GeocodeInterpretation>(_list72.size);
                for (int _i73 = 0; _i73 < _list72.size; ++_i73)
                {
                  GeocodeInterpretation _elem74; // required
                  _elem74 = new GeocodeInterpretation();
                  _elem74.read(iprot);
                  struct.interpretations.add(_elem74);
                }
                iprot.readListEnd();
              }
              struct.setInterpretationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DEBUG_LINES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list75 = iprot.readListBegin();
                struct.debugLines = new ArrayList<String>(_list75.size);
                for (int _i76 = 0; _i76 < _list75.size; ++_i76)
                {
                  String _elem77; // required
                  _elem77 = iprot.readString();
                  struct.debugLines.add(_elem77);
                }
                iprot.readListEnd();
              }
              struct.setDebugLinesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GeocodeResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.interpretations != null) {
        oprot.writeFieldBegin(INTERPRETATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.interpretations.size()));
          for (GeocodeInterpretation _iter78 : struct.interpretations)
          {
            _iter78.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.debugLines != null) {
        if (struct.isSetDebugLines()) {
          oprot.writeFieldBegin(DEBUG_LINES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.debugLines.size()));
            for (String _iter79 : struct.debugLines)
            {
              oprot.writeString(_iter79);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GeocodeResponseTupleSchemeFactory implements SchemeFactory {
    public GeocodeResponseTupleScheme getScheme() {
      return new GeocodeResponseTupleScheme();
    }
  }

  private static class GeocodeResponseTupleScheme extends TupleScheme<GeocodeResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GeocodeResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetInterpretations()) {
        optionals.set(0);
      }
      if (struct.isSetDebugLines()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetInterpretations()) {
        {
          oprot.writeI32(struct.interpretations.size());
          for (GeocodeInterpretation _iter80 : struct.interpretations)
          {
            _iter80.write(oprot);
          }
        }
      }
      if (struct.isSetDebugLines()) {
        {
          oprot.writeI32(struct.debugLines.size());
          for (String _iter81 : struct.debugLines)
          {
            oprot.writeString(_iter81);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GeocodeResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list82 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.interpretations = new ArrayList<GeocodeInterpretation>(_list82.size);
          for (int _i83 = 0; _i83 < _list82.size; ++_i83)
          {
            GeocodeInterpretation _elem84; // required
            _elem84 = new GeocodeInterpretation();
            _elem84.read(iprot);
            struct.interpretations.add(_elem84);
          }
        }
        struct.setInterpretationsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.debugLines = new ArrayList<String>(_list85.size);
          for (int _i86 = 0; _i86 < _list85.size; ++_i86)
          {
            String _elem87; // required
            _elem87 = iprot.readString();
            struct.debugLines.add(_elem87);
          }
        }
        struct.setDebugLinesIsSet(true);
      }
    }
  }

}

